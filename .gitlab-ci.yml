include:
  - /ci/jobs/analyse.yml
  - /ci/jobs/build.yml
  - /ci/jobs/package.yml
  - /ci/jobs/test.yml

variables:
  ARCH: "amd64"
  PACKAGE: "deb"
  # Required for libraries added via submodules
  GIT_SUBMODULE_STRATEGY: recursive
  # Variables set in the GitLab UI are not passed down to service containers
  QA_PEER_USERNAME: $QA_PEER_USERNAME
  QA_PEER_PASSWORD: $QA_PEER_PASSWORD

default:
  tags:
    - linux
    - infra-docker

.before-script:
  before_script:
    # Enable go getting of private repos using gitlab token (username and password are taken from it)
    - git config --global url."https://${CI_REGISTRY_USER}:${CI_JOB_TOKEN}@${CI_SERVER_HOST}".insteadOf "https://${CI_SERVER_HOST}"
    - source ${CI_PROJECT_DIR}/ci/env.sh

.manual-rules-branch:
   rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
      allow_failure: true
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
      when: manual
      allow_failure: true
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never

stages:
  - build
  - package
  - analyse
  - test
  - installation_tests
  - upload_packages
  - remove_packages
  - publish_packages
  - notify
  - check_published

# Test installers
.installation_tests_deb:
  extends:
    - .manual-rules-branch
    - .before-script
  stage: installation_tests
  image: debian:10
  variables:
    REPO_DIR: "/opt/nordvpn"
  script: $CI_PROJECT_DIR/ci/test_install_deb.sh $DOWNLOAD_TOOL
  dependencies:
    - "package/deb: [amd64]"

.installation_tests_rpm:
  extends: .manual-rules-branch
  stage: installation_tests
  variables:
    REPO_DIR: "/opt/nordvpn"
  script: $CI_PROJECT_DIR/ci/test_install_rpm.sh $TEST_OS
  dependencies:
    - "package/rpm: [amd64]"

debian_installer_curl:
  extends: .installation_tests_deb
  variables:
    DOWNLOAD_TOOL: curl

debian_installer_wget:
  extends: .installation_tests_deb
  variables:
    DOWNLOAD_TOOL: wget

centos_installer:
  extends: .installation_tests_rpm
  image: centos
  variables:
    TEST_OS: centos

fedora_installer:
  extends: .installation_tests_rpm
  image: fedora
  variables:
    TEST_OS: fedora

opensuse_installer:
  extends: .installation_tests_rpm
  image: opensuse/leap
  variables:
    TEST_OS: opensuse

# Uploads DEB package to DEB repository (Prod builds only)
upload_deb:
  image: ghcr.io/nordsecurity/nordvpn-linux/uploader:1.0.0
  before_script:
    - ${CI_PROJECT_DIR}/ci/packages.sh
    - source ${CI_PROJECT_DIR}/ci/env.sh
  stage: upload_packages
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
  script: $CI_PROJECT_DIR/ci/upload.sh deb
  dependencies:
    - package/deb
  parallel:
    matrix:
      - ARCH: [i386, amd64, armel, armhf, aarch64]

# Remove DEB package from DEB repository (Prod builds only)
remove_deb:
  image: ghcr.io/nordsecurity/nordvpn-linux/builder:1.0.0
  before_script:
    - ${CI_PROJECT_DIR}/ci/packages.sh
    - source ${CI_PROJECT_DIR}/ci/env.sh
  stage: remove_packages
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
  script: $CI_PROJECT_DIR/ci/remove.sh deb
  dependencies:
    - upload_deb

# Publish changes to DEB repository (Prod builds only)
publish_deb:
  image: ghcr.io/nordsecurity/nordvpn-linux/uploader:1.0.0
  before_script:
    - ${CI_PROJECT_DIR}/ci/packages.sh
    - source ${CI_PROJECT_DIR}/ci/env.sh
  stage: publish_packages
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
  script: $CI_PROJECT_DIR/ci/publish.sh deb
  dependencies:
    - remove_deb

# Uploads RPM package to RPM repository (Prod builds only)
upload_rpm:
  image: ghcr.io/nordsecurity/nordvpn-linux/uploader:1.0.0
  before_script:
    - ${CI_PROJECT_DIR}/ci/packages.sh
    - source ${CI_PROJECT_DIR}/ci/env.sh
  stage: upload_packages
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
  script: $CI_PROJECT_DIR/ci/upload.sh rpm
  dependencies:
    - package/rpm
  parallel:
    matrix:
      - ARCH: [i386, amd64, armel, armhf, aarch64]

# Remove RPM package from RPM repository (Prod builds only)
remove_rpm:
  image: ghcr.io/nordsecurity/nordvpn-linux/builder:1.0.0
  before_script:
    - ${CI_PROJECT_DIR}/ci/packages.sh
    - source ${CI_PROJECT_DIR}/ci/env.sh
  stage: remove_packages
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
  script: $CI_PROJECT_DIR/ci/remove.sh rpm
  dependencies:
    - upload_rpm

# Publish changes to RPM repository (Prod builds only)
publish_rpm:
  image: ghcr.io/nordsecurity/nordvpn-linux/uploader:1.0.0
  before_script:
    - ${CI_PROJECT_DIR}/ci/packages.sh
    - source ${CI_PROJECT_DIR}/ci/env.sh
  stage: publish_packages
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
  script: $CI_PROJECT_DIR/ci/publish.sh rpm
  dependencies:
    - remove_rpm

# Optional: Sends notification to Production about release (Prod builds only)
notify_production:
  image: ghcr.io/nordsecurity/nordvpn-linux/notifier:1.0.0
  before_script:
    - source ${CI_PROJECT_DIR}/ci/env.sh
  stage: notify
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
  script: $CI_PROJECT_DIR/ci/notify_production_release.sh

# Optional: check if prod packages have been published
check_published:
  extends: .before-script
  stage: check_published
  when: manual
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
  script: $CI_PROJECT_DIR/ci/check_published.sh
