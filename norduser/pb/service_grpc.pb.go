// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NorduserClient is the client API for Norduser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NorduserClient interface {
	// StartsFileshare starts fileshare process
	StartFileshare(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StartFileshareResponse, error)
	// StopFileshare stops fileshare process
	StopFileshare(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StopFileshareResponse, error)
}

type norduserClient struct {
	cc grpc.ClientConnInterface
}

func NewNorduserClient(cc grpc.ClientConnInterface) NorduserClient {
	return &norduserClient{cc}
}

func (c *norduserClient) StartFileshare(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StartFileshareResponse, error) {
	out := new(StartFileshareResponse)
	err := c.cc.Invoke(ctx, "/norduserpb.Norduser/StartFileshare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *norduserClient) StopFileshare(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StopFileshareResponse, error) {
	out := new(StopFileshareResponse)
	err := c.cc.Invoke(ctx, "/norduserpb.Norduser/StopFileshare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NorduserServer is the server API for Norduser service.
// All implementations must embed UnimplementedNorduserServer
// for forward compatibility
type NorduserServer interface {
	// StartsFileshare starts fileshare process
	StartFileshare(context.Context, *Empty) (*StartFileshareResponse, error)
	// StopFileshare stops fileshare process
	StopFileshare(context.Context, *Empty) (*StopFileshareResponse, error)
	mustEmbedUnimplementedNorduserServer()
}

// UnimplementedNorduserServer must be embedded to have forward compatible implementations.
type UnimplementedNorduserServer struct {
}

func (UnimplementedNorduserServer) StartFileshare(context.Context, *Empty) (*StartFileshareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFileshare not implemented")
}
func (UnimplementedNorduserServer) StopFileshare(context.Context, *Empty) (*StopFileshareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopFileshare not implemented")
}
func (UnimplementedNorduserServer) mustEmbedUnimplementedNorduserServer() {}

// UnsafeNorduserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NorduserServer will
// result in compilation errors.
type UnsafeNorduserServer interface {
	mustEmbedUnimplementedNorduserServer()
}

func RegisterNorduserServer(s grpc.ServiceRegistrar, srv NorduserServer) {
	s.RegisterService(&Norduser_ServiceDesc, srv)
}

func _Norduser_StartFileshare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NorduserServer).StartFileshare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/norduserpb.Norduser/StartFileshare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NorduserServer).StartFileshare(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Norduser_StopFileshare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NorduserServer).StopFileshare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/norduserpb.Norduser/StopFileshare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NorduserServer).StopFileshare(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Norduser_ServiceDesc is the grpc.ServiceDesc for Norduser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Norduser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "norduserpb.Norduser",
	HandlerType: (*NorduserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFileshare",
			Handler:    _Norduser_StartFileshare_Handler,
		},
		{
			MethodName: "StopFileshare",
			Handler:    _Norduser_StopFileshare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
