// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileshareClient is the client API for Fileshare service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileshareClient interface {
	// Ping to test connection between CLI and Fileshare daemon
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Stop
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Send a file to a peer
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (Fileshare_SendClient, error)
	// Accept a request from another peer to send you a file
	Accept(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (Fileshare_AcceptClient, error)
	// Reject a request from another peer to send you a file
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*Error, error)
	// List all transfers
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Fileshare_ListClient, error)
	// Cancel file transfer to another peer
	CancelFile(ctx context.Context, in *CancelFileRequest, opts ...grpc.CallOption) (*Error, error)
	// SetNotifications about transfer status changes
	SetNotifications(ctx context.Context, in *SetNotificationsRequest, opts ...grpc.CallOption) (*SetNotificationsResponse, error)
	// PurgeTransfersUntil provided time from fileshare implementation storage
	PurgeTransfersUntil(ctx context.Context, in *PurgeTransfersUntilRequest, opts ...grpc.CallOption) (*Error, error)
}

type fileshareClient struct {
	cc grpc.ClientConnInterface
}

func NewFileshareClient(cc grpc.ClientConnInterface) FileshareClient {
	return &fileshareClient{cc}
}

func (c *fileshareClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/filesharepb.Fileshare/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileshareClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/filesharepb.Fileshare/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileshareClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (Fileshare_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &Fileshare_ServiceDesc.Streams[0], "/filesharepb.Fileshare/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileshareSendClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fileshare_SendClient interface {
	Recv() (*StatusResponse, error)
	grpc.ClientStream
}

type fileshareSendClient struct {
	grpc.ClientStream
}

func (x *fileshareSendClient) Recv() (*StatusResponse, error) {
	m := new(StatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileshareClient) Accept(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (Fileshare_AcceptClient, error) {
	stream, err := c.cc.NewStream(ctx, &Fileshare_ServiceDesc.Streams[1], "/filesharepb.Fileshare/Accept", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileshareAcceptClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fileshare_AcceptClient interface {
	Recv() (*StatusResponse, error)
	grpc.ClientStream
}

type fileshareAcceptClient struct {
	grpc.ClientStream
}

func (x *fileshareAcceptClient) Recv() (*StatusResponse, error) {
	m := new(StatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileshareClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/filesharepb.Fileshare/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileshareClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Fileshare_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Fileshare_ServiceDesc.Streams[2], "/filesharepb.Fileshare/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileshareListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fileshare_ListClient interface {
	Recv() (*ListResponse, error)
	grpc.ClientStream
}

type fileshareListClient struct {
	grpc.ClientStream
}

func (x *fileshareListClient) Recv() (*ListResponse, error) {
	m := new(ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileshareClient) CancelFile(ctx context.Context, in *CancelFileRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/filesharepb.Fileshare/CancelFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileshareClient) SetNotifications(ctx context.Context, in *SetNotificationsRequest, opts ...grpc.CallOption) (*SetNotificationsResponse, error) {
	out := new(SetNotificationsResponse)
	err := c.cc.Invoke(ctx, "/filesharepb.Fileshare/SetNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileshareClient) PurgeTransfersUntil(ctx context.Context, in *PurgeTransfersUntilRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/filesharepb.Fileshare/PurgeTransfersUntil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileshareServer is the server API for Fileshare service.
// All implementations must embed UnimplementedFileshareServer
// for forward compatibility
type FileshareServer interface {
	// Ping to test connection between CLI and Fileshare daemon
	Ping(context.Context, *Empty) (*Empty, error)
	// Stop
	Stop(context.Context, *Empty) (*Empty, error)
	// Send a file to a peer
	Send(*SendRequest, Fileshare_SendServer) error
	// Accept a request from another peer to send you a file
	Accept(*AcceptRequest, Fileshare_AcceptServer) error
	// Reject a request from another peer to send you a file
	Cancel(context.Context, *CancelRequest) (*Error, error)
	// List all transfers
	List(*Empty, Fileshare_ListServer) error
	// Cancel file transfer to another peer
	CancelFile(context.Context, *CancelFileRequest) (*Error, error)
	// SetNotifications about transfer status changes
	SetNotifications(context.Context, *SetNotificationsRequest) (*SetNotificationsResponse, error)
	// PurgeTransfersUntil provided time from fileshare implementation storage
	PurgeTransfersUntil(context.Context, *PurgeTransfersUntilRequest) (*Error, error)
	mustEmbedUnimplementedFileshareServer()
}

// UnimplementedFileshareServer must be embedded to have forward compatible implementations.
type UnimplementedFileshareServer struct {
}

func (UnimplementedFileshareServer) Ping(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFileshareServer) Stop(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedFileshareServer) Send(*SendRequest, Fileshare_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedFileshareServer) Accept(*AcceptRequest, Fileshare_AcceptServer) error {
	return status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (UnimplementedFileshareServer) Cancel(context.Context, *CancelRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedFileshareServer) List(*Empty, Fileshare_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFileshareServer) CancelFile(context.Context, *CancelFileRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFile not implemented")
}
func (UnimplementedFileshareServer) SetNotifications(context.Context, *SetNotificationsRequest) (*SetNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNotifications not implemented")
}
func (UnimplementedFileshareServer) PurgeTransfersUntil(context.Context, *PurgeTransfersUntilRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeTransfersUntil not implemented")
}
func (UnimplementedFileshareServer) mustEmbedUnimplementedFileshareServer() {}

// UnsafeFileshareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileshareServer will
// result in compilation errors.
type UnsafeFileshareServer interface {
	mustEmbedUnimplementedFileshareServer()
}

func RegisterFileshareServer(s grpc.ServiceRegistrar, srv FileshareServer) {
	s.RegisterService(&Fileshare_ServiceDesc, srv)
}

func _Fileshare_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileshareServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesharepb.Fileshare/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileshareServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileshare_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileshareServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesharepb.Fileshare/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileshareServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileshare_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileshareServer).Send(m, &fileshareSendServer{stream})
}

type Fileshare_SendServer interface {
	Send(*StatusResponse) error
	grpc.ServerStream
}

type fileshareSendServer struct {
	grpc.ServerStream
}

func (x *fileshareSendServer) Send(m *StatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Fileshare_Accept_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AcceptRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileshareServer).Accept(m, &fileshareAcceptServer{stream})
}

type Fileshare_AcceptServer interface {
	Send(*StatusResponse) error
	grpc.ServerStream
}

type fileshareAcceptServer struct {
	grpc.ServerStream
}

func (x *fileshareAcceptServer) Send(m *StatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Fileshare_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileshareServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesharepb.Fileshare/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileshareServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileshare_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileshareServer).List(m, &fileshareListServer{stream})
}

type Fileshare_ListServer interface {
	Send(*ListResponse) error
	grpc.ServerStream
}

type fileshareListServer struct {
	grpc.ServerStream
}

func (x *fileshareListServer) Send(m *ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Fileshare_CancelFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileshareServer).CancelFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesharepb.Fileshare/CancelFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileshareServer).CancelFile(ctx, req.(*CancelFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileshare_SetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileshareServer).SetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesharepb.Fileshare/SetNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileshareServer).SetNotifications(ctx, req.(*SetNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileshare_PurgeTransfersUntil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeTransfersUntilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileshareServer).PurgeTransfersUntil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesharepb.Fileshare/PurgeTransfersUntil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileshareServer).PurgeTransfersUntil(ctx, req.(*PurgeTransfersUntilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fileshare_ServiceDesc is the grpc.ServiceDesc for Fileshare service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fileshare_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filesharepb.Fileshare",
	HandlerType: (*FileshareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Fileshare_Ping_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Fileshare_Stop_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Fileshare_Cancel_Handler,
		},
		{
			MethodName: "CancelFile",
			Handler:    _Fileshare_CancelFile_Handler,
		},
		{
			MethodName: "SetNotifications",
			Handler:    _Fileshare_SetNotifications_Handler,
		},
		{
			MethodName: "PurgeTransfersUntil",
			Handler:    _Fileshare_PurgeTransfersUntil_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Fileshare_Send_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Accept",
			Handler:       _Fileshare_Accept_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "List",
			Handler:       _Fileshare_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
