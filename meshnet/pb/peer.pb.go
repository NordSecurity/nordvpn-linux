// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.6
// source: peer.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PeerStatus defines the current connection status with the peer
type PeerStatus int32

const (
	PeerStatus_DISCONNECTED PeerStatus = 0
	PeerStatus_CONNECTED    PeerStatus = 1
)

// Enum value maps for PeerStatus.
var (
	PeerStatus_name = map[int32]string{
		0: "DISCONNECTED",
		1: "CONNECTED",
	}
	PeerStatus_value = map[string]int32{
		"DISCONNECTED": 0,
		"CONNECTED":    1,
	}
)

func (x PeerStatus) Enum() *PeerStatus {
	p := new(PeerStatus)
	*p = x
	return p
}

func (x PeerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[0].Descriptor()
}

func (PeerStatus) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[0]
}

func (x PeerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerStatus.Descriptor instead.
func (PeerStatus) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0}
}

// UpdatePeerErrorCode defines an error code on updating a peer within
// the meshnet
type UpdatePeerErrorCode int32

const (
	UpdatePeerErrorCode_PEER_NOT_FOUND UpdatePeerErrorCode = 0
)

// Enum value maps for UpdatePeerErrorCode.
var (
	UpdatePeerErrorCode_name = map[int32]string{
		0: "PEER_NOT_FOUND",
	}
	UpdatePeerErrorCode_value = map[string]int32{
		"PEER_NOT_FOUND": 0,
	}
)

func (x UpdatePeerErrorCode) Enum() *UpdatePeerErrorCode {
	p := new(UpdatePeerErrorCode)
	*p = x
	return p
}

func (x UpdatePeerErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdatePeerErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[1].Descriptor()
}

func (UpdatePeerErrorCode) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[1]
}

func (x UpdatePeerErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdatePeerErrorCode.Descriptor instead.
func (UpdatePeerErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{1}
}

// ChangeNicknameErrorCode defines the errors that occur at meshnet nickname changes
type ChangeNicknameErrorCode int32

const (
	ChangeNicknameErrorCode_SAME_NICKNAME                ChangeNicknameErrorCode = 0
	ChangeNicknameErrorCode_NICKNAME_ALREADY_EMPTY       ChangeNicknameErrorCode = 1
	ChangeNicknameErrorCode_DOMAIN_NAME_EXISTS           ChangeNicknameErrorCode = 2
	ChangeNicknameErrorCode_RATE_LIMIT_REACH             ChangeNicknameErrorCode = 3
	ChangeNicknameErrorCode_NICKNAME_TOO_LONG            ChangeNicknameErrorCode = 4
	ChangeNicknameErrorCode_DUPLICATE_NICKNAME           ChangeNicknameErrorCode = 5
	ChangeNicknameErrorCode_CONTAINS_FORBIDDEN_WORD      ChangeNicknameErrorCode = 6
	ChangeNicknameErrorCode_SUFFIX_OR_PREFIX_ARE_INVALID ChangeNicknameErrorCode = 7
	ChangeNicknameErrorCode_NICKNAME_HAS_DOUBLE_HYPHENS  ChangeNicknameErrorCode = 8
	ChangeNicknameErrorCode_INVALID_CHARS                ChangeNicknameErrorCode = 9
)

// Enum value maps for ChangeNicknameErrorCode.
var (
	ChangeNicknameErrorCode_name = map[int32]string{
		0: "SAME_NICKNAME",
		1: "NICKNAME_ALREADY_EMPTY",
		2: "DOMAIN_NAME_EXISTS",
		3: "RATE_LIMIT_REACH",
		4: "NICKNAME_TOO_LONG",
		5: "DUPLICATE_NICKNAME",
		6: "CONTAINS_FORBIDDEN_WORD",
		7: "SUFFIX_OR_PREFIX_ARE_INVALID",
		8: "NICKNAME_HAS_DOUBLE_HYPHENS",
		9: "INVALID_CHARS",
	}
	ChangeNicknameErrorCode_value = map[string]int32{
		"SAME_NICKNAME":                0,
		"NICKNAME_ALREADY_EMPTY":       1,
		"DOMAIN_NAME_EXISTS":           2,
		"RATE_LIMIT_REACH":             3,
		"NICKNAME_TOO_LONG":            4,
		"DUPLICATE_NICKNAME":           5,
		"CONTAINS_FORBIDDEN_WORD":      6,
		"SUFFIX_OR_PREFIX_ARE_INVALID": 7,
		"NICKNAME_HAS_DOUBLE_HYPHENS":  8,
		"INVALID_CHARS":                9,
	}
)

func (x ChangeNicknameErrorCode) Enum() *ChangeNicknameErrorCode {
	p := new(ChangeNicknameErrorCode)
	*p = x
	return p
}

func (x ChangeNicknameErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeNicknameErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[2].Descriptor()
}

func (ChangeNicknameErrorCode) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[2]
}

func (x ChangeNicknameErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeNicknameErrorCode.Descriptor instead.
func (ChangeNicknameErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{2}
}

// AllowRoutingErrorCode defines an error code which is specific to
// allow routing
type AllowRoutingErrorCode int32

const (
	AllowRoutingErrorCode_ROUTING_ALREADY_ALLOWED AllowRoutingErrorCode = 0
)

// Enum value maps for AllowRoutingErrorCode.
var (
	AllowRoutingErrorCode_name = map[int32]string{
		0: "ROUTING_ALREADY_ALLOWED",
	}
	AllowRoutingErrorCode_value = map[string]int32{
		"ROUTING_ALREADY_ALLOWED": 0,
	}
)

func (x AllowRoutingErrorCode) Enum() *AllowRoutingErrorCode {
	p := new(AllowRoutingErrorCode)
	*p = x
	return p
}

func (x AllowRoutingErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowRoutingErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[3].Descriptor()
}

func (AllowRoutingErrorCode) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[3]
}

func (x AllowRoutingErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllowRoutingErrorCode.Descriptor instead.
func (AllowRoutingErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{3}
}

// DenyRoutingErrorCode defines an error code which is specific to
// deny routing
type DenyRoutingErrorCode int32

const (
	DenyRoutingErrorCode_ROUTING_ALREADY_DENIED DenyRoutingErrorCode = 0
)

// Enum value maps for DenyRoutingErrorCode.
var (
	DenyRoutingErrorCode_name = map[int32]string{
		0: "ROUTING_ALREADY_DENIED",
	}
	DenyRoutingErrorCode_value = map[string]int32{
		"ROUTING_ALREADY_DENIED": 0,
	}
)

func (x DenyRoutingErrorCode) Enum() *DenyRoutingErrorCode {
	p := new(DenyRoutingErrorCode)
	*p = x
	return p
}

func (x DenyRoutingErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DenyRoutingErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[4].Descriptor()
}

func (DenyRoutingErrorCode) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[4]
}

func (x DenyRoutingErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DenyRoutingErrorCode.Descriptor instead.
func (DenyRoutingErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{4}
}

// AllowIncomingErrorCode defines an error code which is specific to
// allow incoming traffic
type AllowIncomingErrorCode int32

const (
	AllowIncomingErrorCode_INCOMING_ALREADY_ALLOWED AllowIncomingErrorCode = 0
)

// Enum value maps for AllowIncomingErrorCode.
var (
	AllowIncomingErrorCode_name = map[int32]string{
		0: "INCOMING_ALREADY_ALLOWED",
	}
	AllowIncomingErrorCode_value = map[string]int32{
		"INCOMING_ALREADY_ALLOWED": 0,
	}
)

func (x AllowIncomingErrorCode) Enum() *AllowIncomingErrorCode {
	p := new(AllowIncomingErrorCode)
	*p = x
	return p
}

func (x AllowIncomingErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowIncomingErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[5].Descriptor()
}

func (AllowIncomingErrorCode) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[5]
}

func (x AllowIncomingErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllowIncomingErrorCode.Descriptor instead.
func (AllowIncomingErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{5}
}

// DenyIncomingErrorCode defines an error code which is specific to
// deny incoming traffic
type DenyIncomingErrorCode int32

const (
	DenyIncomingErrorCode_INCOMING_ALREADY_DENIED DenyIncomingErrorCode = 0
)

// Enum value maps for DenyIncomingErrorCode.
var (
	DenyIncomingErrorCode_name = map[int32]string{
		0: "INCOMING_ALREADY_DENIED",
	}
	DenyIncomingErrorCode_value = map[string]int32{
		"INCOMING_ALREADY_DENIED": 0,
	}
)

func (x DenyIncomingErrorCode) Enum() *DenyIncomingErrorCode {
	p := new(DenyIncomingErrorCode)
	*p = x
	return p
}

func (x DenyIncomingErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DenyIncomingErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[6].Descriptor()
}

func (DenyIncomingErrorCode) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[6]
}

func (x DenyIncomingErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DenyIncomingErrorCode.Descriptor instead.
func (DenyIncomingErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{6}
}

// AllowLocalNetworkErrorCode defines an error code which is specific to
// allow local network traffic
type AllowLocalNetworkErrorCode int32

const (
	AllowLocalNetworkErrorCode_LOCAL_NETWORK_ALREADY_ALLOWED AllowLocalNetworkErrorCode = 0
)

// Enum value maps for AllowLocalNetworkErrorCode.
var (
	AllowLocalNetworkErrorCode_name = map[int32]string{
		0: "LOCAL_NETWORK_ALREADY_ALLOWED",
	}
	AllowLocalNetworkErrorCode_value = map[string]int32{
		"LOCAL_NETWORK_ALREADY_ALLOWED": 0,
	}
)

func (x AllowLocalNetworkErrorCode) Enum() *AllowLocalNetworkErrorCode {
	p := new(AllowLocalNetworkErrorCode)
	*p = x
	return p
}

func (x AllowLocalNetworkErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowLocalNetworkErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[7].Descriptor()
}

func (AllowLocalNetworkErrorCode) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[7]
}

func (x AllowLocalNetworkErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllowLocalNetworkErrorCode.Descriptor instead.
func (AllowLocalNetworkErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{7}
}

// DenyLocalNetworkErrorCode defines an error code which is specific to
// deny local network traffic
type DenyLocalNetworkErrorCode int32

const (
	DenyLocalNetworkErrorCode_LOCAL_NETWORK_ALREADY_DENIED DenyLocalNetworkErrorCode = 0
)

// Enum value maps for DenyLocalNetworkErrorCode.
var (
	DenyLocalNetworkErrorCode_name = map[int32]string{
		0: "LOCAL_NETWORK_ALREADY_DENIED",
	}
	DenyLocalNetworkErrorCode_value = map[string]int32{
		"LOCAL_NETWORK_ALREADY_DENIED": 0,
	}
)

func (x DenyLocalNetworkErrorCode) Enum() *DenyLocalNetworkErrorCode {
	p := new(DenyLocalNetworkErrorCode)
	*p = x
	return p
}

func (x DenyLocalNetworkErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DenyLocalNetworkErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[8].Descriptor()
}

func (DenyLocalNetworkErrorCode) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[8]
}

func (x DenyLocalNetworkErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DenyLocalNetworkErrorCode.Descriptor instead.
func (DenyLocalNetworkErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{8}
}

type AllowFileshareErrorCode int32

const (
	AllowFileshareErrorCode_SEND_ALREADY_ALLOWED AllowFileshareErrorCode = 0
)

// Enum value maps for AllowFileshareErrorCode.
var (
	AllowFileshareErrorCode_name = map[int32]string{
		0: "SEND_ALREADY_ALLOWED",
	}
	AllowFileshareErrorCode_value = map[string]int32{
		"SEND_ALREADY_ALLOWED": 0,
	}
)

func (x AllowFileshareErrorCode) Enum() *AllowFileshareErrorCode {
	p := new(AllowFileshareErrorCode)
	*p = x
	return p
}

func (x AllowFileshareErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowFileshareErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[9].Descriptor()
}

func (AllowFileshareErrorCode) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[9]
}

func (x AllowFileshareErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllowFileshareErrorCode.Descriptor instead.
func (AllowFileshareErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{9}
}

type DenyFileshareErrorCode int32

const (
	DenyFileshareErrorCode_SEND_ALREADY_DENIED DenyFileshareErrorCode = 0
)

// Enum value maps for DenyFileshareErrorCode.
var (
	DenyFileshareErrorCode_name = map[int32]string{
		0: "SEND_ALREADY_DENIED",
	}
	DenyFileshareErrorCode_value = map[string]int32{
		"SEND_ALREADY_DENIED": 0,
	}
)

func (x DenyFileshareErrorCode) Enum() *DenyFileshareErrorCode {
	p := new(DenyFileshareErrorCode)
	*p = x
	return p
}

func (x DenyFileshareErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DenyFileshareErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[10].Descriptor()
}

func (DenyFileshareErrorCode) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[10]
}

func (x DenyFileshareErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DenyFileshareErrorCode.Descriptor instead.
func (DenyFileshareErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{10}
}

type EnableAutomaticFileshareErrorCode int32

const (
	EnableAutomaticFileshareErrorCode_AUTOMATIC_FILESHARE_ALREADY_ENABLED EnableAutomaticFileshareErrorCode = 0
)

// Enum value maps for EnableAutomaticFileshareErrorCode.
var (
	EnableAutomaticFileshareErrorCode_name = map[int32]string{
		0: "AUTOMATIC_FILESHARE_ALREADY_ENABLED",
	}
	EnableAutomaticFileshareErrorCode_value = map[string]int32{
		"AUTOMATIC_FILESHARE_ALREADY_ENABLED": 0,
	}
)

func (x EnableAutomaticFileshareErrorCode) Enum() *EnableAutomaticFileshareErrorCode {
	p := new(EnableAutomaticFileshareErrorCode)
	*p = x
	return p
}

func (x EnableAutomaticFileshareErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnableAutomaticFileshareErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[11].Descriptor()
}

func (EnableAutomaticFileshareErrorCode) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[11]
}

func (x EnableAutomaticFileshareErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnableAutomaticFileshareErrorCode.Descriptor instead.
func (EnableAutomaticFileshareErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{11}
}

type DisableAutomaticFileshareErrorCode int32

const (
	DisableAutomaticFileshareErrorCode_AUTOMATIC_FILESHARE_ALREADY_DISABLED DisableAutomaticFileshareErrorCode = 0
)

// Enum value maps for DisableAutomaticFileshareErrorCode.
var (
	DisableAutomaticFileshareErrorCode_name = map[int32]string{
		0: "AUTOMATIC_FILESHARE_ALREADY_DISABLED",
	}
	DisableAutomaticFileshareErrorCode_value = map[string]int32{
		"AUTOMATIC_FILESHARE_ALREADY_DISABLED": 0,
	}
)

func (x DisableAutomaticFileshareErrorCode) Enum() *DisableAutomaticFileshareErrorCode {
	p := new(DisableAutomaticFileshareErrorCode)
	*p = x
	return p
}

func (x DisableAutomaticFileshareErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisableAutomaticFileshareErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[12].Descriptor()
}

func (DisableAutomaticFileshareErrorCode) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[12]
}

func (x DisableAutomaticFileshareErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisableAutomaticFileshareErrorCode.Descriptor instead.
func (DisableAutomaticFileshareErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{12}
}

type ConnectErrorCode int32

const (
	ConnectErrorCode_PEER_DOES_NOT_ALLOW_ROUTING ConnectErrorCode = 0
	ConnectErrorCode_ALREADY_CONNECTED           ConnectErrorCode = 1
	ConnectErrorCode_CONNECT_FAILED              ConnectErrorCode = 2
	ConnectErrorCode_PEER_NO_IP                  ConnectErrorCode = 3
	ConnectErrorCode_ALREADY_CONNECTING          ConnectErrorCode = 4
	ConnectErrorCode_CANCELED                    ConnectErrorCode = 5
)

// Enum value maps for ConnectErrorCode.
var (
	ConnectErrorCode_name = map[int32]string{
		0: "PEER_DOES_NOT_ALLOW_ROUTING",
		1: "ALREADY_CONNECTED",
		2: "CONNECT_FAILED",
		3: "PEER_NO_IP",
		4: "ALREADY_CONNECTING",
		5: "CANCELED",
	}
	ConnectErrorCode_value = map[string]int32{
		"PEER_DOES_NOT_ALLOW_ROUTING": 0,
		"ALREADY_CONNECTED":           1,
		"CONNECT_FAILED":              2,
		"PEER_NO_IP":                  3,
		"ALREADY_CONNECTING":          4,
		"CANCELED":                    5,
	}
)

func (x ConnectErrorCode) Enum() *ConnectErrorCode {
	p := new(ConnectErrorCode)
	*p = x
	return p
}

func (x ConnectErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[13].Descriptor()
}

func (ConnectErrorCode) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[13]
}

func (x ConnectErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectErrorCode.Descriptor instead.
func (ConnectErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{13}
}

// GetPeersResponse defines
type GetPeersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GetPeersResponse_Peers
	//	*GetPeersResponse_Error
	Response isGetPeersResponse_Response `protobuf_oneof:"response"`
}

func (x *GetPeersResponse) Reset() {
	*x = GetPeersResponse{}
	mi := &file_peer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeersResponse) ProtoMessage() {}

func (x *GetPeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeersResponse.ProtoReflect.Descriptor instead.
func (*GetPeersResponse) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0}
}

func (m *GetPeersResponse) GetResponse() isGetPeersResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetPeersResponse) GetPeers() *PeerList {
	if x, ok := x.GetResponse().(*GetPeersResponse_Peers); ok {
		return x.Peers
	}
	return nil
}

func (x *GetPeersResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*GetPeersResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isGetPeersResponse_Response interface {
	isGetPeersResponse_Response()
}

type GetPeersResponse_Peers struct {
	Peers *PeerList `protobuf:"bytes,1,opt,name=peers,proto3,oneof"`
}

type GetPeersResponse_Error struct {
	Error *Error `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

func (*GetPeersResponse_Peers) isGetPeersResponse_Response() {}

func (*GetPeersResponse_Error) isGetPeersResponse_Response() {}

// PeerList defines a list of all the peers related to the device
type PeerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Self     *Peer   `protobuf:"bytes,1,opt,name=self,proto3" json:"self,omitempty"`
	Local    []*Peer `protobuf:"bytes,2,rep,name=local,proto3" json:"local,omitempty"`
	External []*Peer `protobuf:"bytes,3,rep,name=external,proto3" json:"external,omitempty"`
}

func (x *PeerList) Reset() {
	*x = PeerList{}
	mi := &file_peer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerList) ProtoMessage() {}

func (x *PeerList) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerList.ProtoReflect.Descriptor instead.
func (*PeerList) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{1}
}

func (x *PeerList) GetSelf() *Peer {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *PeerList) GetLocal() []*Peer {
	if x != nil {
		return x.Local
	}
	return nil
}

func (x *PeerList) GetExternal() []*Peer {
	if x != nil {
		return x.External
	}
	return nil
}

// Peer defines a single meshnet peer
type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier            string     `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Pubkey                string     `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Ip                    string     `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Endpoints             []string   `protobuf:"bytes,4,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	Os                    string     `protobuf:"bytes,5,opt,name=os,proto3" json:"os,omitempty"`
	OsVersion             string     `protobuf:"bytes,6,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	Hostname              string     `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Distro                string     `protobuf:"bytes,8,opt,name=distro,proto3" json:"distro,omitempty"`
	Email                 string     `protobuf:"bytes,9,opt,name=email,proto3" json:"email,omitempty"`
	IsInboundAllowed      bool       `protobuf:"varint,10,opt,name=is_inbound_allowed,json=isInboundAllowed,proto3" json:"is_inbound_allowed,omitempty"`
	IsRoutable            bool       `protobuf:"varint,11,opt,name=is_routable,json=isRoutable,proto3" json:"is_routable,omitempty"`
	IsLocalNetworkAllowed bool       `protobuf:"varint,15,opt,name=is_local_network_allowed,json=isLocalNetworkAllowed,proto3" json:"is_local_network_allowed,omitempty"`
	IsFileshareAllowed    bool       `protobuf:"varint,17,opt,name=is_fileshare_allowed,json=isFileshareAllowed,proto3" json:"is_fileshare_allowed,omitempty"`
	DoIAllowInbound       bool       `protobuf:"varint,12,opt,name=do_i_allow_inbound,json=doIAllowInbound,proto3" json:"do_i_allow_inbound,omitempty"`
	DoIAllowRouting       bool       `protobuf:"varint,13,opt,name=do_i_allow_routing,json=doIAllowRouting,proto3" json:"do_i_allow_routing,omitempty"`
	DoIAllowLocalNetwork  bool       `protobuf:"varint,16,opt,name=do_i_allow_local_network,json=doIAllowLocalNetwork,proto3" json:"do_i_allow_local_network,omitempty"`
	DoIAllowFileshare     bool       `protobuf:"varint,18,opt,name=do_i_allow_fileshare,json=doIAllowFileshare,proto3" json:"do_i_allow_fileshare,omitempty"`
	AlwaysAcceptFiles     bool       `protobuf:"varint,19,opt,name=always_accept_files,json=alwaysAcceptFiles,proto3" json:"always_accept_files,omitempty"`
	Status                PeerStatus `protobuf:"varint,14,opt,name=status,proto3,enum=meshpb.PeerStatus" json:"status,omitempty"`
	Nickname              string     `protobuf:"bytes,20,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	mi := &file_peer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{2}
}

func (x *Peer) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Peer) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *Peer) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Peer) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Peer) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Peer) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *Peer) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Peer) GetDistro() string {
	if x != nil {
		return x.Distro
	}
	return ""
}

func (x *Peer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Peer) GetIsInboundAllowed() bool {
	if x != nil {
		return x.IsInboundAllowed
	}
	return false
}

func (x *Peer) GetIsRoutable() bool {
	if x != nil {
		return x.IsRoutable
	}
	return false
}

func (x *Peer) GetIsLocalNetworkAllowed() bool {
	if x != nil {
		return x.IsLocalNetworkAllowed
	}
	return false
}

func (x *Peer) GetIsFileshareAllowed() bool {
	if x != nil {
		return x.IsFileshareAllowed
	}
	return false
}

func (x *Peer) GetDoIAllowInbound() bool {
	if x != nil {
		return x.DoIAllowInbound
	}
	return false
}

func (x *Peer) GetDoIAllowRouting() bool {
	if x != nil {
		return x.DoIAllowRouting
	}
	return false
}

func (x *Peer) GetDoIAllowLocalNetwork() bool {
	if x != nil {
		return x.DoIAllowLocalNetwork
	}
	return false
}

func (x *Peer) GetDoIAllowFileshare() bool {
	if x != nil {
		return x.DoIAllowFileshare
	}
	return false
}

func (x *Peer) GetAlwaysAcceptFiles() bool {
	if x != nil {
		return x.AlwaysAcceptFiles
	}
	return false
}

func (x *Peer) GetStatus() PeerStatus {
	if x != nil {
		return x.Status
	}
	return PeerStatus_DISCONNECTED
}

func (x *Peer) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

// UpdatePeerRequest defines a request to remove a peer from a meshnet
type UpdatePeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *UpdatePeerRequest) Reset() {
	*x = UpdatePeerRequest{}
	mi := &file_peer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePeerRequest) ProtoMessage() {}

func (x *UpdatePeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePeerRequest.ProtoReflect.Descriptor instead.
func (*UpdatePeerRequest) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{3}
}

func (x *UpdatePeerRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

// Error defines a generic meshnet error that could be returned by most meshnet endpoints
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Error:
	//
	//	*Error_ServiceErrorCode
	//	*Error_MeshnetErrorCode
	Error isError_Error `protobuf_oneof:"error"`
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_peer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{4}
}

func (m *Error) GetError() isError_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (x *Error) GetServiceErrorCode() ServiceErrorCode {
	if x, ok := x.GetError().(*Error_ServiceErrorCode); ok {
		return x.ServiceErrorCode
	}
	return ServiceErrorCode_NOT_LOGGED_IN
}

func (x *Error) GetMeshnetErrorCode() MeshnetErrorCode {
	if x, ok := x.GetError().(*Error_MeshnetErrorCode); ok {
		return x.MeshnetErrorCode
	}
	return MeshnetErrorCode_NOT_REGISTERED
}

type isError_Error interface {
	isError_Error()
}

type Error_ServiceErrorCode struct {
	ServiceErrorCode ServiceErrorCode `protobuf:"varint,1,opt,name=service_error_code,json=serviceErrorCode,proto3,enum=meshpb.ServiceErrorCode,oneof"`
}

type Error_MeshnetErrorCode struct {
	MeshnetErrorCode MeshnetErrorCode `protobuf:"varint,2,opt,name=meshnet_error_code,json=meshnetErrorCode,proto3,enum=meshpb.MeshnetErrorCode,oneof"`
}

func (*Error_ServiceErrorCode) isError_Error() {}

func (*Error_MeshnetErrorCode) isError_Error() {}

// UpdatePeerError can be either generic meshnet error or generic peer update error
type UpdatePeerError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Error:
	//
	//	*UpdatePeerError_GeneralError
	//	*UpdatePeerError_UpdatePeerErrorCode
	Error isUpdatePeerError_Error `protobuf_oneof:"error"`
}

func (x *UpdatePeerError) Reset() {
	*x = UpdatePeerError{}
	mi := &file_peer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePeerError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePeerError) ProtoMessage() {}

func (x *UpdatePeerError) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePeerError.ProtoReflect.Descriptor instead.
func (*UpdatePeerError) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{5}
}

func (m *UpdatePeerError) GetError() isUpdatePeerError_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (x *UpdatePeerError) GetGeneralError() *Error {
	if x, ok := x.GetError().(*UpdatePeerError_GeneralError); ok {
		return x.GeneralError
	}
	return nil
}

func (x *UpdatePeerError) GetUpdatePeerErrorCode() UpdatePeerErrorCode {
	if x, ok := x.GetError().(*UpdatePeerError_UpdatePeerErrorCode); ok {
		return x.UpdatePeerErrorCode
	}
	return UpdatePeerErrorCode_PEER_NOT_FOUND
}

type isUpdatePeerError_Error interface {
	isUpdatePeerError_Error()
}

type UpdatePeerError_GeneralError struct {
	GeneralError *Error `protobuf:"bytes,1,opt,name=general_error,json=generalError,proto3,oneof"`
}

type UpdatePeerError_UpdatePeerErrorCode struct {
	UpdatePeerErrorCode UpdatePeerErrorCode `protobuf:"varint,2,opt,name=update_peer_error_code,json=updatePeerErrorCode,proto3,enum=meshpb.UpdatePeerErrorCode,oneof"`
}

func (*UpdatePeerError_GeneralError) isUpdatePeerError_Error() {}

func (*UpdatePeerError_UpdatePeerErrorCode) isUpdatePeerError_Error() {}

// RemovePeerResponse defines a peer removal response
type RemovePeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*RemovePeerResponse_Empty
	//	*RemovePeerResponse_UpdatePeerError
	Response isRemovePeerResponse_Response `protobuf_oneof:"response"`
}

func (x *RemovePeerResponse) Reset() {
	*x = RemovePeerResponse{}
	mi := &file_peer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePeerResponse) ProtoMessage() {}

func (x *RemovePeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePeerResponse.ProtoReflect.Descriptor instead.
func (*RemovePeerResponse) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{6}
}

func (m *RemovePeerResponse) GetResponse() isRemovePeerResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *RemovePeerResponse) GetEmpty() *Empty {
	if x, ok := x.GetResponse().(*RemovePeerResponse_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *RemovePeerResponse) GetUpdatePeerError() *UpdatePeerError {
	if x, ok := x.GetResponse().(*RemovePeerResponse_UpdatePeerError); ok {
		return x.UpdatePeerError
	}
	return nil
}

type isRemovePeerResponse_Response interface {
	isRemovePeerResponse_Response()
}

type RemovePeerResponse_Empty struct {
	Empty *Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type RemovePeerResponse_UpdatePeerError struct {
	UpdatePeerError *UpdatePeerError `protobuf:"bytes,5,opt,name=update_peer_error,json=updatePeerError,proto3,oneof"`
}

func (*RemovePeerResponse_Empty) isRemovePeerResponse_Response() {}

func (*RemovePeerResponse_UpdatePeerError) isRemovePeerResponse_Response() {}

// ChangePeerNicknameRequest defines a request to change the nickname for a meshnet peer
type ChangePeerNicknameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Nickname   string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *ChangePeerNicknameRequest) Reset() {
	*x = ChangePeerNicknameRequest{}
	mi := &file_peer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangePeerNicknameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePeerNicknameRequest) ProtoMessage() {}

func (x *ChangePeerNicknameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePeerNicknameRequest.ProtoReflect.Descriptor instead.
func (*ChangePeerNicknameRequest) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{7}
}

func (x *ChangePeerNicknameRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ChangePeerNicknameRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

// ChangeMachineNicknameRequest defines a request to change the nickname for the current machine from meshnet
type ChangeMachineNicknameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *ChangeMachineNicknameRequest) Reset() {
	*x = ChangeMachineNicknameRequest{}
	mi := &file_peer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeMachineNicknameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMachineNicknameRequest) ProtoMessage() {}

func (x *ChangeMachineNicknameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMachineNicknameRequest.ProtoReflect.Descriptor instead.
func (*ChangeMachineNicknameRequest) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{8}
}

func (x *ChangeMachineNicknameRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

// ChangeNicknameResponse defines a response to change(set/remove) the nickname for a peer or for current machine
type ChangeNicknameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ChangeNicknameResponse_Empty
	//	*ChangeNicknameResponse_ChangeNicknameErrorCode
	//	*ChangeNicknameResponse_UpdatePeerError
	Response isChangeNicknameResponse_Response `protobuf_oneof:"response"`
}

func (x *ChangeNicknameResponse) Reset() {
	*x = ChangeNicknameResponse{}
	mi := &file_peer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeNicknameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeNicknameResponse) ProtoMessage() {}

func (x *ChangeNicknameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeNicknameResponse.ProtoReflect.Descriptor instead.
func (*ChangeNicknameResponse) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{9}
}

func (m *ChangeNicknameResponse) GetResponse() isChangeNicknameResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ChangeNicknameResponse) GetEmpty() *Empty {
	if x, ok := x.GetResponse().(*ChangeNicknameResponse_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *ChangeNicknameResponse) GetChangeNicknameErrorCode() ChangeNicknameErrorCode {
	if x, ok := x.GetResponse().(*ChangeNicknameResponse_ChangeNicknameErrorCode); ok {
		return x.ChangeNicknameErrorCode
	}
	return ChangeNicknameErrorCode_SAME_NICKNAME
}

func (x *ChangeNicknameResponse) GetUpdatePeerError() *UpdatePeerError {
	if x, ok := x.GetResponse().(*ChangeNicknameResponse_UpdatePeerError); ok {
		return x.UpdatePeerError
	}
	return nil
}

type isChangeNicknameResponse_Response interface {
	isChangeNicknameResponse_Response()
}

type ChangeNicknameResponse_Empty struct {
	Empty *Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type ChangeNicknameResponse_ChangeNicknameErrorCode struct {
	ChangeNicknameErrorCode ChangeNicknameErrorCode `protobuf:"varint,5,opt,name=change_nickname_error_code,json=changeNicknameErrorCode,proto3,enum=meshpb.ChangeNicknameErrorCode,oneof"`
}

type ChangeNicknameResponse_UpdatePeerError struct {
	UpdatePeerError *UpdatePeerError `protobuf:"bytes,6,opt,name=update_peer_error,json=updatePeerError,proto3,oneof"`
}

func (*ChangeNicknameResponse_Empty) isChangeNicknameResponse_Response() {}

func (*ChangeNicknameResponse_ChangeNicknameErrorCode) isChangeNicknameResponse_Response() {}

func (*ChangeNicknameResponse_UpdatePeerError) isChangeNicknameResponse_Response() {}

// AllowRoutingResponse defines a response for allow routing request
type AllowRoutingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*AllowRoutingResponse_Empty
	//	*AllowRoutingResponse_AllowRoutingErrorCode
	//	*AllowRoutingResponse_UpdatePeerError
	Response isAllowRoutingResponse_Response `protobuf_oneof:"response"`
}

func (x *AllowRoutingResponse) Reset() {
	*x = AllowRoutingResponse{}
	mi := &file_peer_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllowRoutingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowRoutingResponse) ProtoMessage() {}

func (x *AllowRoutingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowRoutingResponse.ProtoReflect.Descriptor instead.
func (*AllowRoutingResponse) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{10}
}

func (m *AllowRoutingResponse) GetResponse() isAllowRoutingResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *AllowRoutingResponse) GetEmpty() *Empty {
	if x, ok := x.GetResponse().(*AllowRoutingResponse_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *AllowRoutingResponse) GetAllowRoutingErrorCode() AllowRoutingErrorCode {
	if x, ok := x.GetResponse().(*AllowRoutingResponse_AllowRoutingErrorCode); ok {
		return x.AllowRoutingErrorCode
	}
	return AllowRoutingErrorCode_ROUTING_ALREADY_ALLOWED
}

func (x *AllowRoutingResponse) GetUpdatePeerError() *UpdatePeerError {
	if x, ok := x.GetResponse().(*AllowRoutingResponse_UpdatePeerError); ok {
		return x.UpdatePeerError
	}
	return nil
}

type isAllowRoutingResponse_Response interface {
	isAllowRoutingResponse_Response()
}

type AllowRoutingResponse_Empty struct {
	Empty *Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type AllowRoutingResponse_AllowRoutingErrorCode struct {
	AllowRoutingErrorCode AllowRoutingErrorCode `protobuf:"varint,3,opt,name=allow_routing_error_code,json=allowRoutingErrorCode,proto3,enum=meshpb.AllowRoutingErrorCode,oneof"`
}

type AllowRoutingResponse_UpdatePeerError struct {
	UpdatePeerError *UpdatePeerError `protobuf:"bytes,6,opt,name=update_peer_error,json=updatePeerError,proto3,oneof"`
}

func (*AllowRoutingResponse_Empty) isAllowRoutingResponse_Response() {}

func (*AllowRoutingResponse_AllowRoutingErrorCode) isAllowRoutingResponse_Response() {}

func (*AllowRoutingResponse_UpdatePeerError) isAllowRoutingResponse_Response() {}

// DenyRoutingResponse defines a response for allow routing request
type DenyRoutingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*DenyRoutingResponse_Empty
	//	*DenyRoutingResponse_DenyRoutingErrorCode
	//	*DenyRoutingResponse_UpdatePeerError
	Response isDenyRoutingResponse_Response `protobuf_oneof:"response"`
}

func (x *DenyRoutingResponse) Reset() {
	*x = DenyRoutingResponse{}
	mi := &file_peer_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DenyRoutingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenyRoutingResponse) ProtoMessage() {}

func (x *DenyRoutingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenyRoutingResponse.ProtoReflect.Descriptor instead.
func (*DenyRoutingResponse) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{11}
}

func (m *DenyRoutingResponse) GetResponse() isDenyRoutingResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *DenyRoutingResponse) GetEmpty() *Empty {
	if x, ok := x.GetResponse().(*DenyRoutingResponse_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *DenyRoutingResponse) GetDenyRoutingErrorCode() DenyRoutingErrorCode {
	if x, ok := x.GetResponse().(*DenyRoutingResponse_DenyRoutingErrorCode); ok {
		return x.DenyRoutingErrorCode
	}
	return DenyRoutingErrorCode_ROUTING_ALREADY_DENIED
}

func (x *DenyRoutingResponse) GetUpdatePeerError() *UpdatePeerError {
	if x, ok := x.GetResponse().(*DenyRoutingResponse_UpdatePeerError); ok {
		return x.UpdatePeerError
	}
	return nil
}

type isDenyRoutingResponse_Response interface {
	isDenyRoutingResponse_Response()
}

type DenyRoutingResponse_Empty struct {
	Empty *Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type DenyRoutingResponse_DenyRoutingErrorCode struct {
	DenyRoutingErrorCode DenyRoutingErrorCode `protobuf:"varint,3,opt,name=deny_routing_error_code,json=denyRoutingErrorCode,proto3,enum=meshpb.DenyRoutingErrorCode,oneof"`
}

type DenyRoutingResponse_UpdatePeerError struct {
	UpdatePeerError *UpdatePeerError `protobuf:"bytes,6,opt,name=update_peer_error,json=updatePeerError,proto3,oneof"`
}

func (*DenyRoutingResponse_Empty) isDenyRoutingResponse_Response() {}

func (*DenyRoutingResponse_DenyRoutingErrorCode) isDenyRoutingResponse_Response() {}

func (*DenyRoutingResponse_UpdatePeerError) isDenyRoutingResponse_Response() {}

// AllowIncomingResponse defines a response for allow incoming
// traffic request
type AllowIncomingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*AllowIncomingResponse_Empty
	//	*AllowIncomingResponse_AllowIncomingErrorCode
	//	*AllowIncomingResponse_UpdatePeerError
	Response isAllowIncomingResponse_Response `protobuf_oneof:"response"`
}

func (x *AllowIncomingResponse) Reset() {
	*x = AllowIncomingResponse{}
	mi := &file_peer_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllowIncomingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowIncomingResponse) ProtoMessage() {}

func (x *AllowIncomingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowIncomingResponse.ProtoReflect.Descriptor instead.
func (*AllowIncomingResponse) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{12}
}

func (m *AllowIncomingResponse) GetResponse() isAllowIncomingResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *AllowIncomingResponse) GetEmpty() *Empty {
	if x, ok := x.GetResponse().(*AllowIncomingResponse_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *AllowIncomingResponse) GetAllowIncomingErrorCode() AllowIncomingErrorCode {
	if x, ok := x.GetResponse().(*AllowIncomingResponse_AllowIncomingErrorCode); ok {
		return x.AllowIncomingErrorCode
	}
	return AllowIncomingErrorCode_INCOMING_ALREADY_ALLOWED
}

func (x *AllowIncomingResponse) GetUpdatePeerError() *UpdatePeerError {
	if x, ok := x.GetResponse().(*AllowIncomingResponse_UpdatePeerError); ok {
		return x.UpdatePeerError
	}
	return nil
}

type isAllowIncomingResponse_Response interface {
	isAllowIncomingResponse_Response()
}

type AllowIncomingResponse_Empty struct {
	Empty *Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type AllowIncomingResponse_AllowIncomingErrorCode struct {
	AllowIncomingErrorCode AllowIncomingErrorCode `protobuf:"varint,3,opt,name=allow_incoming_error_code,json=allowIncomingErrorCode,proto3,enum=meshpb.AllowIncomingErrorCode,oneof"`
}

type AllowIncomingResponse_UpdatePeerError struct {
	UpdatePeerError *UpdatePeerError `protobuf:"bytes,6,opt,name=update_peer_error,json=updatePeerError,proto3,oneof"`
}

func (*AllowIncomingResponse_Empty) isAllowIncomingResponse_Response() {}

func (*AllowIncomingResponse_AllowIncomingErrorCode) isAllowIncomingResponse_Response() {}

func (*AllowIncomingResponse_UpdatePeerError) isAllowIncomingResponse_Response() {}

// DenyIncomingResponse defines a response for deny incoming
// traffic request
type DenyIncomingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*DenyIncomingResponse_Empty
	//	*DenyIncomingResponse_DenyIncomingErrorCode
	//	*DenyIncomingResponse_UpdatePeerError
	Response isDenyIncomingResponse_Response `protobuf_oneof:"response"`
}

func (x *DenyIncomingResponse) Reset() {
	*x = DenyIncomingResponse{}
	mi := &file_peer_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DenyIncomingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenyIncomingResponse) ProtoMessage() {}

func (x *DenyIncomingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenyIncomingResponse.ProtoReflect.Descriptor instead.
func (*DenyIncomingResponse) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{13}
}

func (m *DenyIncomingResponse) GetResponse() isDenyIncomingResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *DenyIncomingResponse) GetEmpty() *Empty {
	if x, ok := x.GetResponse().(*DenyIncomingResponse_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *DenyIncomingResponse) GetDenyIncomingErrorCode() DenyIncomingErrorCode {
	if x, ok := x.GetResponse().(*DenyIncomingResponse_DenyIncomingErrorCode); ok {
		return x.DenyIncomingErrorCode
	}
	return DenyIncomingErrorCode_INCOMING_ALREADY_DENIED
}

func (x *DenyIncomingResponse) GetUpdatePeerError() *UpdatePeerError {
	if x, ok := x.GetResponse().(*DenyIncomingResponse_UpdatePeerError); ok {
		return x.UpdatePeerError
	}
	return nil
}

type isDenyIncomingResponse_Response interface {
	isDenyIncomingResponse_Response()
}

type DenyIncomingResponse_Empty struct {
	Empty *Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type DenyIncomingResponse_DenyIncomingErrorCode struct {
	DenyIncomingErrorCode DenyIncomingErrorCode `protobuf:"varint,3,opt,name=deny_incoming_error_code,json=denyIncomingErrorCode,proto3,enum=meshpb.DenyIncomingErrorCode,oneof"`
}

type DenyIncomingResponse_UpdatePeerError struct {
	UpdatePeerError *UpdatePeerError `protobuf:"bytes,6,opt,name=update_peer_error,json=updatePeerError,proto3,oneof"`
}

func (*DenyIncomingResponse_Empty) isDenyIncomingResponse_Response() {}

func (*DenyIncomingResponse_DenyIncomingErrorCode) isDenyIncomingResponse_Response() {}

func (*DenyIncomingResponse_UpdatePeerError) isDenyIncomingResponse_Response() {}

// AllowLocalNetworkResponse defines a response for allow local network
// traffic request
type AllowLocalNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*AllowLocalNetworkResponse_Empty
	//	*AllowLocalNetworkResponse_AllowLocalNetworkErrorCode
	//	*AllowLocalNetworkResponse_UpdatePeerError
	Response isAllowLocalNetworkResponse_Response `protobuf_oneof:"response"`
}

func (x *AllowLocalNetworkResponse) Reset() {
	*x = AllowLocalNetworkResponse{}
	mi := &file_peer_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllowLocalNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowLocalNetworkResponse) ProtoMessage() {}

func (x *AllowLocalNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowLocalNetworkResponse.ProtoReflect.Descriptor instead.
func (*AllowLocalNetworkResponse) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{14}
}

func (m *AllowLocalNetworkResponse) GetResponse() isAllowLocalNetworkResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *AllowLocalNetworkResponse) GetEmpty() *Empty {
	if x, ok := x.GetResponse().(*AllowLocalNetworkResponse_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *AllowLocalNetworkResponse) GetAllowLocalNetworkErrorCode() AllowLocalNetworkErrorCode {
	if x, ok := x.GetResponse().(*AllowLocalNetworkResponse_AllowLocalNetworkErrorCode); ok {
		return x.AllowLocalNetworkErrorCode
	}
	return AllowLocalNetworkErrorCode_LOCAL_NETWORK_ALREADY_ALLOWED
}

func (x *AllowLocalNetworkResponse) GetUpdatePeerError() *UpdatePeerError {
	if x, ok := x.GetResponse().(*AllowLocalNetworkResponse_UpdatePeerError); ok {
		return x.UpdatePeerError
	}
	return nil
}

type isAllowLocalNetworkResponse_Response interface {
	isAllowLocalNetworkResponse_Response()
}

type AllowLocalNetworkResponse_Empty struct {
	Empty *Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type AllowLocalNetworkResponse_AllowLocalNetworkErrorCode struct {
	AllowLocalNetworkErrorCode AllowLocalNetworkErrorCode `protobuf:"varint,3,opt,name=allow_local_network_error_code,json=allowLocalNetworkErrorCode,proto3,enum=meshpb.AllowLocalNetworkErrorCode,oneof"`
}

type AllowLocalNetworkResponse_UpdatePeerError struct {
	UpdatePeerError *UpdatePeerError `protobuf:"bytes,6,opt,name=update_peer_error,json=updatePeerError,proto3,oneof"`
}

func (*AllowLocalNetworkResponse_Empty) isAllowLocalNetworkResponse_Response() {}

func (*AllowLocalNetworkResponse_AllowLocalNetworkErrorCode) isAllowLocalNetworkResponse_Response() {}

func (*AllowLocalNetworkResponse_UpdatePeerError) isAllowLocalNetworkResponse_Response() {}

// DenyIncomingResponse defines a response for deny local network
// traffic request
type DenyLocalNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*DenyLocalNetworkResponse_Empty
	//	*DenyLocalNetworkResponse_DenyLocalNetworkErrorCode
	//	*DenyLocalNetworkResponse_UpdatePeerError
	Response isDenyLocalNetworkResponse_Response `protobuf_oneof:"response"`
}

func (x *DenyLocalNetworkResponse) Reset() {
	*x = DenyLocalNetworkResponse{}
	mi := &file_peer_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DenyLocalNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenyLocalNetworkResponse) ProtoMessage() {}

func (x *DenyLocalNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenyLocalNetworkResponse.ProtoReflect.Descriptor instead.
func (*DenyLocalNetworkResponse) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{15}
}

func (m *DenyLocalNetworkResponse) GetResponse() isDenyLocalNetworkResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *DenyLocalNetworkResponse) GetEmpty() *Empty {
	if x, ok := x.GetResponse().(*DenyLocalNetworkResponse_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *DenyLocalNetworkResponse) GetDenyLocalNetworkErrorCode() DenyLocalNetworkErrorCode {
	if x, ok := x.GetResponse().(*DenyLocalNetworkResponse_DenyLocalNetworkErrorCode); ok {
		return x.DenyLocalNetworkErrorCode
	}
	return DenyLocalNetworkErrorCode_LOCAL_NETWORK_ALREADY_DENIED
}

func (x *DenyLocalNetworkResponse) GetUpdatePeerError() *UpdatePeerError {
	if x, ok := x.GetResponse().(*DenyLocalNetworkResponse_UpdatePeerError); ok {
		return x.UpdatePeerError
	}
	return nil
}

type isDenyLocalNetworkResponse_Response interface {
	isDenyLocalNetworkResponse_Response()
}

type DenyLocalNetworkResponse_Empty struct {
	Empty *Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type DenyLocalNetworkResponse_DenyLocalNetworkErrorCode struct {
	DenyLocalNetworkErrorCode DenyLocalNetworkErrorCode `protobuf:"varint,3,opt,name=deny_local_network_error_code,json=denyLocalNetworkErrorCode,proto3,enum=meshpb.DenyLocalNetworkErrorCode,oneof"`
}

type DenyLocalNetworkResponse_UpdatePeerError struct {
	UpdatePeerError *UpdatePeerError `protobuf:"bytes,6,opt,name=update_peer_error,json=updatePeerError,proto3,oneof"`
}

func (*DenyLocalNetworkResponse_Empty) isDenyLocalNetworkResponse_Response() {}

func (*DenyLocalNetworkResponse_DenyLocalNetworkErrorCode) isDenyLocalNetworkResponse_Response() {}

func (*DenyLocalNetworkResponse_UpdatePeerError) isDenyLocalNetworkResponse_Response() {}

// AllowSendFileResponse defines a response for allow send file request
type AllowFileshareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*AllowFileshareResponse_Empty
	//	*AllowFileshareResponse_AllowSendErrorCode
	//	*AllowFileshareResponse_UpdatePeerError
	Response isAllowFileshareResponse_Response `protobuf_oneof:"response"`
}

func (x *AllowFileshareResponse) Reset() {
	*x = AllowFileshareResponse{}
	mi := &file_peer_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllowFileshareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowFileshareResponse) ProtoMessage() {}

func (x *AllowFileshareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowFileshareResponse.ProtoReflect.Descriptor instead.
func (*AllowFileshareResponse) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{16}
}

func (m *AllowFileshareResponse) GetResponse() isAllowFileshareResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *AllowFileshareResponse) GetEmpty() *Empty {
	if x, ok := x.GetResponse().(*AllowFileshareResponse_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *AllowFileshareResponse) GetAllowSendErrorCode() AllowFileshareErrorCode {
	if x, ok := x.GetResponse().(*AllowFileshareResponse_AllowSendErrorCode); ok {
		return x.AllowSendErrorCode
	}
	return AllowFileshareErrorCode_SEND_ALREADY_ALLOWED
}

func (x *AllowFileshareResponse) GetUpdatePeerError() *UpdatePeerError {
	if x, ok := x.GetResponse().(*AllowFileshareResponse_UpdatePeerError); ok {
		return x.UpdatePeerError
	}
	return nil
}

type isAllowFileshareResponse_Response interface {
	isAllowFileshareResponse_Response()
}

type AllowFileshareResponse_Empty struct {
	Empty *Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type AllowFileshareResponse_AllowSendErrorCode struct {
	AllowSendErrorCode AllowFileshareErrorCode `protobuf:"varint,3,opt,name=allow_send_error_code,json=allowSendErrorCode,proto3,enum=meshpb.AllowFileshareErrorCode,oneof"`
}

type AllowFileshareResponse_UpdatePeerError struct {
	UpdatePeerError *UpdatePeerError `protobuf:"bytes,6,opt,name=update_peer_error,json=updatePeerError,proto3,oneof"`
}

func (*AllowFileshareResponse_Empty) isAllowFileshareResponse_Response() {}

func (*AllowFileshareResponse_AllowSendErrorCode) isAllowFileshareResponse_Response() {}

func (*AllowFileshareResponse_UpdatePeerError) isAllowFileshareResponse_Response() {}

// DenySendFileResponse defines a response for deny send file request
type DenyFileshareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*DenyFileshareResponse_Empty
	//	*DenyFileshareResponse_DenySendErrorCode
	//	*DenyFileshareResponse_UpdatePeerError
	Response isDenyFileshareResponse_Response `protobuf_oneof:"response"`
}

func (x *DenyFileshareResponse) Reset() {
	*x = DenyFileshareResponse{}
	mi := &file_peer_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DenyFileshareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenyFileshareResponse) ProtoMessage() {}

func (x *DenyFileshareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenyFileshareResponse.ProtoReflect.Descriptor instead.
func (*DenyFileshareResponse) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{17}
}

func (m *DenyFileshareResponse) GetResponse() isDenyFileshareResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *DenyFileshareResponse) GetEmpty() *Empty {
	if x, ok := x.GetResponse().(*DenyFileshareResponse_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *DenyFileshareResponse) GetDenySendErrorCode() DenyFileshareErrorCode {
	if x, ok := x.GetResponse().(*DenyFileshareResponse_DenySendErrorCode); ok {
		return x.DenySendErrorCode
	}
	return DenyFileshareErrorCode_SEND_ALREADY_DENIED
}

func (x *DenyFileshareResponse) GetUpdatePeerError() *UpdatePeerError {
	if x, ok := x.GetResponse().(*DenyFileshareResponse_UpdatePeerError); ok {
		return x.UpdatePeerError
	}
	return nil
}

type isDenyFileshareResponse_Response interface {
	isDenyFileshareResponse_Response()
}

type DenyFileshareResponse_Empty struct {
	Empty *Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type DenyFileshareResponse_DenySendErrorCode struct {
	DenySendErrorCode DenyFileshareErrorCode `protobuf:"varint,3,opt,name=deny_send_error_code,json=denySendErrorCode,proto3,enum=meshpb.DenyFileshareErrorCode,oneof"`
}

type DenyFileshareResponse_UpdatePeerError struct {
	UpdatePeerError *UpdatePeerError `protobuf:"bytes,6,opt,name=update_peer_error,json=updatePeerError,proto3,oneof"`
}

func (*DenyFileshareResponse_Empty) isDenyFileshareResponse_Response() {}

func (*DenyFileshareResponse_DenySendErrorCode) isDenyFileshareResponse_Response() {}

func (*DenyFileshareResponse_UpdatePeerError) isDenyFileshareResponse_Response() {}

// AllowSendFileResponse defines a response for allow send file request
type EnableAutomaticFileshareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*EnableAutomaticFileshareResponse_Empty
	//	*EnableAutomaticFileshareResponse_EnableAutomaticFileshareErrorCode
	//	*EnableAutomaticFileshareResponse_UpdatePeerError
	Response isEnableAutomaticFileshareResponse_Response `protobuf_oneof:"response"`
}

func (x *EnableAutomaticFileshareResponse) Reset() {
	*x = EnableAutomaticFileshareResponse{}
	mi := &file_peer_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableAutomaticFileshareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableAutomaticFileshareResponse) ProtoMessage() {}

func (x *EnableAutomaticFileshareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableAutomaticFileshareResponse.ProtoReflect.Descriptor instead.
func (*EnableAutomaticFileshareResponse) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{18}
}

func (m *EnableAutomaticFileshareResponse) GetResponse() isEnableAutomaticFileshareResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *EnableAutomaticFileshareResponse) GetEmpty() *Empty {
	if x, ok := x.GetResponse().(*EnableAutomaticFileshareResponse_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *EnableAutomaticFileshareResponse) GetEnableAutomaticFileshareErrorCode() EnableAutomaticFileshareErrorCode {
	if x, ok := x.GetResponse().(*EnableAutomaticFileshareResponse_EnableAutomaticFileshareErrorCode); ok {
		return x.EnableAutomaticFileshareErrorCode
	}
	return EnableAutomaticFileshareErrorCode_AUTOMATIC_FILESHARE_ALREADY_ENABLED
}

func (x *EnableAutomaticFileshareResponse) GetUpdatePeerError() *UpdatePeerError {
	if x, ok := x.GetResponse().(*EnableAutomaticFileshareResponse_UpdatePeerError); ok {
		return x.UpdatePeerError
	}
	return nil
}

type isEnableAutomaticFileshareResponse_Response interface {
	isEnableAutomaticFileshareResponse_Response()
}

type EnableAutomaticFileshareResponse_Empty struct {
	Empty *Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type EnableAutomaticFileshareResponse_EnableAutomaticFileshareErrorCode struct {
	EnableAutomaticFileshareErrorCode EnableAutomaticFileshareErrorCode `protobuf:"varint,3,opt,name=enable_automatic_fileshare_error_code,json=enableAutomaticFileshareErrorCode,proto3,enum=meshpb.EnableAutomaticFileshareErrorCode,oneof"`
}

type EnableAutomaticFileshareResponse_UpdatePeerError struct {
	UpdatePeerError *UpdatePeerError `protobuf:"bytes,6,opt,name=update_peer_error,json=updatePeerError,proto3,oneof"`
}

func (*EnableAutomaticFileshareResponse_Empty) isEnableAutomaticFileshareResponse_Response() {}

func (*EnableAutomaticFileshareResponse_EnableAutomaticFileshareErrorCode) isEnableAutomaticFileshareResponse_Response() {
}

func (*EnableAutomaticFileshareResponse_UpdatePeerError) isEnableAutomaticFileshareResponse_Response() {
}

// DenySendFileResponse defines a response for deny send file request
type DisableAutomaticFileshareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*DisableAutomaticFileshareResponse_Empty
	//	*DisableAutomaticFileshareResponse_DisableAutomaticFileshareErrorCode
	//	*DisableAutomaticFileshareResponse_UpdatePeerError
	Response isDisableAutomaticFileshareResponse_Response `protobuf_oneof:"response"`
}

func (x *DisableAutomaticFileshareResponse) Reset() {
	*x = DisableAutomaticFileshareResponse{}
	mi := &file_peer_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableAutomaticFileshareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableAutomaticFileshareResponse) ProtoMessage() {}

func (x *DisableAutomaticFileshareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableAutomaticFileshareResponse.ProtoReflect.Descriptor instead.
func (*DisableAutomaticFileshareResponse) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{19}
}

func (m *DisableAutomaticFileshareResponse) GetResponse() isDisableAutomaticFileshareResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *DisableAutomaticFileshareResponse) GetEmpty() *Empty {
	if x, ok := x.GetResponse().(*DisableAutomaticFileshareResponse_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *DisableAutomaticFileshareResponse) GetDisableAutomaticFileshareErrorCode() DisableAutomaticFileshareErrorCode {
	if x, ok := x.GetResponse().(*DisableAutomaticFileshareResponse_DisableAutomaticFileshareErrorCode); ok {
		return x.DisableAutomaticFileshareErrorCode
	}
	return DisableAutomaticFileshareErrorCode_AUTOMATIC_FILESHARE_ALREADY_DISABLED
}

func (x *DisableAutomaticFileshareResponse) GetUpdatePeerError() *UpdatePeerError {
	if x, ok := x.GetResponse().(*DisableAutomaticFileshareResponse_UpdatePeerError); ok {
		return x.UpdatePeerError
	}
	return nil
}

type isDisableAutomaticFileshareResponse_Response interface {
	isDisableAutomaticFileshareResponse_Response()
}

type DisableAutomaticFileshareResponse_Empty struct {
	Empty *Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type DisableAutomaticFileshareResponse_DisableAutomaticFileshareErrorCode struct {
	DisableAutomaticFileshareErrorCode DisableAutomaticFileshareErrorCode `protobuf:"varint,3,opt,name=disable_automatic_fileshare_error_code,json=disableAutomaticFileshareErrorCode,proto3,enum=meshpb.DisableAutomaticFileshareErrorCode,oneof"`
}

type DisableAutomaticFileshareResponse_UpdatePeerError struct {
	UpdatePeerError *UpdatePeerError `protobuf:"bytes,6,opt,name=update_peer_error,json=updatePeerError,proto3,oneof"`
}

func (*DisableAutomaticFileshareResponse_Empty) isDisableAutomaticFileshareResponse_Response() {}

func (*DisableAutomaticFileshareResponse_DisableAutomaticFileshareErrorCode) isDisableAutomaticFileshareResponse_Response() {
}

func (*DisableAutomaticFileshareResponse_UpdatePeerError) isDisableAutomaticFileshareResponse_Response() {
}

type ConnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ConnectResponse_Empty
	//	*ConnectResponse_ConnectErrorCode
	//	*ConnectResponse_UpdatePeerError
	Response isConnectResponse_Response `protobuf_oneof:"response"`
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	mi := &file_peer_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{20}
}

func (m *ConnectResponse) GetResponse() isConnectResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ConnectResponse) GetEmpty() *Empty {
	if x, ok := x.GetResponse().(*ConnectResponse_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *ConnectResponse) GetConnectErrorCode() ConnectErrorCode {
	if x, ok := x.GetResponse().(*ConnectResponse_ConnectErrorCode); ok {
		return x.ConnectErrorCode
	}
	return ConnectErrorCode_PEER_DOES_NOT_ALLOW_ROUTING
}

func (x *ConnectResponse) GetUpdatePeerError() *UpdatePeerError {
	if x, ok := x.GetResponse().(*ConnectResponse_UpdatePeerError); ok {
		return x.UpdatePeerError
	}
	return nil
}

type isConnectResponse_Response interface {
	isConnectResponse_Response()
}

type ConnectResponse_Empty struct {
	Empty *Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type ConnectResponse_ConnectErrorCode struct {
	ConnectErrorCode ConnectErrorCode `protobuf:"varint,3,opt,name=connect_error_code,json=connectErrorCode,proto3,enum=meshpb.ConnectErrorCode,oneof"`
}

type ConnectResponse_UpdatePeerError struct {
	UpdatePeerError *UpdatePeerError `protobuf:"bytes,6,opt,name=update_peer_error,json=updatePeerError,proto3,oneof"`
}

func (*ConnectResponse_Empty) isConnectResponse_Response() {}

func (*ConnectResponse_ConnectErrorCode) isConnectResponse_Response() {}

func (*ConnectResponse_UpdatePeerError) isConnectResponse_Response() {}

type PrivateKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*PrivateKeyResponse_PrivateKey
	//	*PrivateKeyResponse_ServiceErrorCode
	//	*PrivateKeyResponse_MeshnetErrorCode
	Response isPrivateKeyResponse_Response `protobuf_oneof:"response"`
}

func (x *PrivateKeyResponse) Reset() {
	*x = PrivateKeyResponse{}
	mi := &file_peer_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKeyResponse) ProtoMessage() {}

func (x *PrivateKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKeyResponse.ProtoReflect.Descriptor instead.
func (*PrivateKeyResponse) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{21}
}

func (m *PrivateKeyResponse) GetResponse() isPrivateKeyResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *PrivateKeyResponse) GetPrivateKey() string {
	if x, ok := x.GetResponse().(*PrivateKeyResponse_PrivateKey); ok {
		return x.PrivateKey
	}
	return ""
}

func (x *PrivateKeyResponse) GetServiceErrorCode() ServiceErrorCode {
	if x, ok := x.GetResponse().(*PrivateKeyResponse_ServiceErrorCode); ok {
		return x.ServiceErrorCode
	}
	return ServiceErrorCode_NOT_LOGGED_IN
}

func (x *PrivateKeyResponse) GetMeshnetErrorCode() MeshnetErrorCode {
	if x, ok := x.GetResponse().(*PrivateKeyResponse_MeshnetErrorCode); ok {
		return x.MeshnetErrorCode
	}
	return MeshnetErrorCode_NOT_REGISTERED
}

type isPrivateKeyResponse_Response interface {
	isPrivateKeyResponse_Response()
}

type PrivateKeyResponse_PrivateKey struct {
	PrivateKey string `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3,oneof"`
}

type PrivateKeyResponse_ServiceErrorCode struct {
	ServiceErrorCode ServiceErrorCode `protobuf:"varint,2,opt,name=service_error_code,json=serviceErrorCode,proto3,enum=meshpb.ServiceErrorCode,oneof"`
}

type PrivateKeyResponse_MeshnetErrorCode struct {
	MeshnetErrorCode MeshnetErrorCode `protobuf:"varint,3,opt,name=meshnet_error_code,json=meshnetErrorCode,proto3,enum=meshpb.MeshnetErrorCode,oneof"`
}

func (*PrivateKeyResponse_PrivateKey) isPrivateKeyResponse_Response() {}

func (*PrivateKeyResponse_ServiceErrorCode) isPrivateKeyResponse_Response() {}

func (*PrivateKeyResponse_MeshnetErrorCode) isPrivateKeyResponse_Response() {}

var File_peer_proto protoreflect.FileDescriptor

var file_peer_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x65,
	0x73, 0x68, 0x70, 0x62, 0x1a, 0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x0a, 0x08, 0x50, 0x65,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x22, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x08,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x08, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0xda, 0x05, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a,
	0x18, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x6f, 0x5f, 0x69,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x6f, 0x49, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x6f, 0x5f, 0x69, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x64, 0x6f, 0x49, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x36, 0x0a, 0x18, 0x64, 0x6f, 0x5f, 0x69, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x6f, 0x49, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x6f,
	0x5f, 0x69, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x6f, 0x49, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xa4, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x48, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x12,
	0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0xa4, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x16, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x3a, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf2, 0x01, 0x0a,
	0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5e,
	0x0a, 0x1a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45,
	0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xea, 0x01, 0x0a, 0x14, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x58, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe6,
	0x01, 0x0a, 0x13, 0x44, 0x65, 0x6e, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x55, 0x0a,
	0x17, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6e, 0x79, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x14,
	0x64, 0x65, 0x6e, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x15, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x19, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x16, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6e,
	0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x18, 0x64, 0x65, 0x6e, 0x79,
	0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6e, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65, 0x6e,
	0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x19, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x68, 0x0a, 0x1e, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6e, 0x79,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x1d, 0x64,
	0x65, 0x6e, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6e, 0x79,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x19, 0x64, 0x65, 0x6e, 0x79, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x16, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x65, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a,
	0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xe4, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6e, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x51, 0x0a, 0x14, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6e, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x11, 0x64, 0x65, 0x6e, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x20, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x7d, 0x0a, 0x25, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x21, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x21, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x26, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x22, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a,
	0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xd7, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x6e, 0x65,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x65,
	0x73, 0x68, 0x6e, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x2d, 0x0a, 0x0a, 0x50, 0x65,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x29, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x00, 0x2a, 0x98, 0x02, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x49, 0x43, 0x4b, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x49, 0x43, 0x4b, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x4e, 0x49, 0x43, 0x4b, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f,
	0x4e, 0x47, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x5f, 0x4e, 0x49, 0x43, 0x4b, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44,
	0x45, 0x4e, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x55, 0x46,
	0x46, 0x49, 0x58, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x41, 0x52,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x4e,
	0x49, 0x43, 0x4b, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x44, 0x4f, 0x55, 0x42,
	0x4c, 0x45, 0x5f, 0x48, 0x59, 0x50, 0x48, 0x45, 0x4e, 0x53, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x53, 0x10, 0x09, 0x2a,
	0x34, 0x0a, 0x15, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x4f, 0x55, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x32, 0x0a, 0x14, 0x44, 0x65, 0x6e, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x36, 0x0a, 0x16, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x5f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10,
	0x00, 0x2a, 0x34, 0x0a, 0x15, 0x44, 0x65, 0x6e, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e,
	0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x3f, 0x0a, 0x1a, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x3d, 0x0a, 0x19, 0x44, 0x65, 0x6e, 0x79,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x33, 0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x31, 0x0a, 0x16,
	0x44, 0x65, 0x6e, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x00, 0x2a,
	0x4c, 0x0a, 0x21, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49,
	0x43, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x4e, 0x0a,
	0x22, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x94, 0x01,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x49, 0x50, 0x10, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x45, 0x44, 0x10, 0x05, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4e, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f,
	0x6e, 0x6f, 0x72, 0x64, 0x76, 0x70, 0x6e, 0x2d, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2f, 0x6d, 0x65,
	0x73, 0x68, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_peer_proto_rawDescOnce sync.Once
	file_peer_proto_rawDescData = file_peer_proto_rawDesc
)

func file_peer_proto_rawDescGZIP() []byte {
	file_peer_proto_rawDescOnce.Do(func() {
		file_peer_proto_rawDescData = protoimpl.X.CompressGZIP(file_peer_proto_rawDescData)
	})
	return file_peer_proto_rawDescData
}

var file_peer_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_peer_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_peer_proto_goTypes = []any{
	(PeerStatus)(0),                           // 0: meshpb.PeerStatus
	(UpdatePeerErrorCode)(0),                  // 1: meshpb.UpdatePeerErrorCode
	(ChangeNicknameErrorCode)(0),              // 2: meshpb.ChangeNicknameErrorCode
	(AllowRoutingErrorCode)(0),                // 3: meshpb.AllowRoutingErrorCode
	(DenyRoutingErrorCode)(0),                 // 4: meshpb.DenyRoutingErrorCode
	(AllowIncomingErrorCode)(0),               // 5: meshpb.AllowIncomingErrorCode
	(DenyIncomingErrorCode)(0),                // 6: meshpb.DenyIncomingErrorCode
	(AllowLocalNetworkErrorCode)(0),           // 7: meshpb.AllowLocalNetworkErrorCode
	(DenyLocalNetworkErrorCode)(0),            // 8: meshpb.DenyLocalNetworkErrorCode
	(AllowFileshareErrorCode)(0),              // 9: meshpb.AllowFileshareErrorCode
	(DenyFileshareErrorCode)(0),               // 10: meshpb.DenyFileshareErrorCode
	(EnableAutomaticFileshareErrorCode)(0),    // 11: meshpb.EnableAutomaticFileshareErrorCode
	(DisableAutomaticFileshareErrorCode)(0),   // 12: meshpb.DisableAutomaticFileshareErrorCode
	(ConnectErrorCode)(0),                     // 13: meshpb.ConnectErrorCode
	(*GetPeersResponse)(nil),                  // 14: meshpb.GetPeersResponse
	(*PeerList)(nil),                          // 15: meshpb.PeerList
	(*Peer)(nil),                              // 16: meshpb.Peer
	(*UpdatePeerRequest)(nil),                 // 17: meshpb.UpdatePeerRequest
	(*Error)(nil),                             // 18: meshpb.Error
	(*UpdatePeerError)(nil),                   // 19: meshpb.UpdatePeerError
	(*RemovePeerResponse)(nil),                // 20: meshpb.RemovePeerResponse
	(*ChangePeerNicknameRequest)(nil),         // 21: meshpb.ChangePeerNicknameRequest
	(*ChangeMachineNicknameRequest)(nil),      // 22: meshpb.ChangeMachineNicknameRequest
	(*ChangeNicknameResponse)(nil),            // 23: meshpb.ChangeNicknameResponse
	(*AllowRoutingResponse)(nil),              // 24: meshpb.AllowRoutingResponse
	(*DenyRoutingResponse)(nil),               // 25: meshpb.DenyRoutingResponse
	(*AllowIncomingResponse)(nil),             // 26: meshpb.AllowIncomingResponse
	(*DenyIncomingResponse)(nil),              // 27: meshpb.DenyIncomingResponse
	(*AllowLocalNetworkResponse)(nil),         // 28: meshpb.AllowLocalNetworkResponse
	(*DenyLocalNetworkResponse)(nil),          // 29: meshpb.DenyLocalNetworkResponse
	(*AllowFileshareResponse)(nil),            // 30: meshpb.AllowFileshareResponse
	(*DenyFileshareResponse)(nil),             // 31: meshpb.DenyFileshareResponse
	(*EnableAutomaticFileshareResponse)(nil),  // 32: meshpb.EnableAutomaticFileshareResponse
	(*DisableAutomaticFileshareResponse)(nil), // 33: meshpb.DisableAutomaticFileshareResponse
	(*ConnectResponse)(nil),                   // 34: meshpb.ConnectResponse
	(*PrivateKeyResponse)(nil),                // 35: meshpb.PrivateKeyResponse
	(ServiceErrorCode)(0),                     // 36: meshpb.ServiceErrorCode
	(MeshnetErrorCode)(0),                     // 37: meshpb.MeshnetErrorCode
	(*Empty)(nil),                             // 38: meshpb.Empty
}
var file_peer_proto_depIdxs = []int32{
	15, // 0: meshpb.GetPeersResponse.peers:type_name -> meshpb.PeerList
	18, // 1: meshpb.GetPeersResponse.error:type_name -> meshpb.Error
	16, // 2: meshpb.PeerList.self:type_name -> meshpb.Peer
	16, // 3: meshpb.PeerList.local:type_name -> meshpb.Peer
	16, // 4: meshpb.PeerList.external:type_name -> meshpb.Peer
	0,  // 5: meshpb.Peer.status:type_name -> meshpb.PeerStatus
	36, // 6: meshpb.Error.service_error_code:type_name -> meshpb.ServiceErrorCode
	37, // 7: meshpb.Error.meshnet_error_code:type_name -> meshpb.MeshnetErrorCode
	18, // 8: meshpb.UpdatePeerError.general_error:type_name -> meshpb.Error
	1,  // 9: meshpb.UpdatePeerError.update_peer_error_code:type_name -> meshpb.UpdatePeerErrorCode
	38, // 10: meshpb.RemovePeerResponse.empty:type_name -> meshpb.Empty
	19, // 11: meshpb.RemovePeerResponse.update_peer_error:type_name -> meshpb.UpdatePeerError
	38, // 12: meshpb.ChangeNicknameResponse.empty:type_name -> meshpb.Empty
	2,  // 13: meshpb.ChangeNicknameResponse.change_nickname_error_code:type_name -> meshpb.ChangeNicknameErrorCode
	19, // 14: meshpb.ChangeNicknameResponse.update_peer_error:type_name -> meshpb.UpdatePeerError
	38, // 15: meshpb.AllowRoutingResponse.empty:type_name -> meshpb.Empty
	3,  // 16: meshpb.AllowRoutingResponse.allow_routing_error_code:type_name -> meshpb.AllowRoutingErrorCode
	19, // 17: meshpb.AllowRoutingResponse.update_peer_error:type_name -> meshpb.UpdatePeerError
	38, // 18: meshpb.DenyRoutingResponse.empty:type_name -> meshpb.Empty
	4,  // 19: meshpb.DenyRoutingResponse.deny_routing_error_code:type_name -> meshpb.DenyRoutingErrorCode
	19, // 20: meshpb.DenyRoutingResponse.update_peer_error:type_name -> meshpb.UpdatePeerError
	38, // 21: meshpb.AllowIncomingResponse.empty:type_name -> meshpb.Empty
	5,  // 22: meshpb.AllowIncomingResponse.allow_incoming_error_code:type_name -> meshpb.AllowIncomingErrorCode
	19, // 23: meshpb.AllowIncomingResponse.update_peer_error:type_name -> meshpb.UpdatePeerError
	38, // 24: meshpb.DenyIncomingResponse.empty:type_name -> meshpb.Empty
	6,  // 25: meshpb.DenyIncomingResponse.deny_incoming_error_code:type_name -> meshpb.DenyIncomingErrorCode
	19, // 26: meshpb.DenyIncomingResponse.update_peer_error:type_name -> meshpb.UpdatePeerError
	38, // 27: meshpb.AllowLocalNetworkResponse.empty:type_name -> meshpb.Empty
	7,  // 28: meshpb.AllowLocalNetworkResponse.allow_local_network_error_code:type_name -> meshpb.AllowLocalNetworkErrorCode
	19, // 29: meshpb.AllowLocalNetworkResponse.update_peer_error:type_name -> meshpb.UpdatePeerError
	38, // 30: meshpb.DenyLocalNetworkResponse.empty:type_name -> meshpb.Empty
	8,  // 31: meshpb.DenyLocalNetworkResponse.deny_local_network_error_code:type_name -> meshpb.DenyLocalNetworkErrorCode
	19, // 32: meshpb.DenyLocalNetworkResponse.update_peer_error:type_name -> meshpb.UpdatePeerError
	38, // 33: meshpb.AllowFileshareResponse.empty:type_name -> meshpb.Empty
	9,  // 34: meshpb.AllowFileshareResponse.allow_send_error_code:type_name -> meshpb.AllowFileshareErrorCode
	19, // 35: meshpb.AllowFileshareResponse.update_peer_error:type_name -> meshpb.UpdatePeerError
	38, // 36: meshpb.DenyFileshareResponse.empty:type_name -> meshpb.Empty
	10, // 37: meshpb.DenyFileshareResponse.deny_send_error_code:type_name -> meshpb.DenyFileshareErrorCode
	19, // 38: meshpb.DenyFileshareResponse.update_peer_error:type_name -> meshpb.UpdatePeerError
	38, // 39: meshpb.EnableAutomaticFileshareResponse.empty:type_name -> meshpb.Empty
	11, // 40: meshpb.EnableAutomaticFileshareResponse.enable_automatic_fileshare_error_code:type_name -> meshpb.EnableAutomaticFileshareErrorCode
	19, // 41: meshpb.EnableAutomaticFileshareResponse.update_peer_error:type_name -> meshpb.UpdatePeerError
	38, // 42: meshpb.DisableAutomaticFileshareResponse.empty:type_name -> meshpb.Empty
	12, // 43: meshpb.DisableAutomaticFileshareResponse.disable_automatic_fileshare_error_code:type_name -> meshpb.DisableAutomaticFileshareErrorCode
	19, // 44: meshpb.DisableAutomaticFileshareResponse.update_peer_error:type_name -> meshpb.UpdatePeerError
	38, // 45: meshpb.ConnectResponse.empty:type_name -> meshpb.Empty
	13, // 46: meshpb.ConnectResponse.connect_error_code:type_name -> meshpb.ConnectErrorCode
	19, // 47: meshpb.ConnectResponse.update_peer_error:type_name -> meshpb.UpdatePeerError
	36, // 48: meshpb.PrivateKeyResponse.service_error_code:type_name -> meshpb.ServiceErrorCode
	37, // 49: meshpb.PrivateKeyResponse.meshnet_error_code:type_name -> meshpb.MeshnetErrorCode
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_peer_proto_init() }
func file_peer_proto_init() {
	if File_peer_proto != nil {
		return
	}
	file_empty_proto_init()
	file_service_response_proto_init()
	file_peer_proto_msgTypes[0].OneofWrappers = []any{
		(*GetPeersResponse_Peers)(nil),
		(*GetPeersResponse_Error)(nil),
	}
	file_peer_proto_msgTypes[4].OneofWrappers = []any{
		(*Error_ServiceErrorCode)(nil),
		(*Error_MeshnetErrorCode)(nil),
	}
	file_peer_proto_msgTypes[5].OneofWrappers = []any{
		(*UpdatePeerError_GeneralError)(nil),
		(*UpdatePeerError_UpdatePeerErrorCode)(nil),
	}
	file_peer_proto_msgTypes[6].OneofWrappers = []any{
		(*RemovePeerResponse_Empty)(nil),
		(*RemovePeerResponse_UpdatePeerError)(nil),
	}
	file_peer_proto_msgTypes[9].OneofWrappers = []any{
		(*ChangeNicknameResponse_Empty)(nil),
		(*ChangeNicknameResponse_ChangeNicknameErrorCode)(nil),
		(*ChangeNicknameResponse_UpdatePeerError)(nil),
	}
	file_peer_proto_msgTypes[10].OneofWrappers = []any{
		(*AllowRoutingResponse_Empty)(nil),
		(*AllowRoutingResponse_AllowRoutingErrorCode)(nil),
		(*AllowRoutingResponse_UpdatePeerError)(nil),
	}
	file_peer_proto_msgTypes[11].OneofWrappers = []any{
		(*DenyRoutingResponse_Empty)(nil),
		(*DenyRoutingResponse_DenyRoutingErrorCode)(nil),
		(*DenyRoutingResponse_UpdatePeerError)(nil),
	}
	file_peer_proto_msgTypes[12].OneofWrappers = []any{
		(*AllowIncomingResponse_Empty)(nil),
		(*AllowIncomingResponse_AllowIncomingErrorCode)(nil),
		(*AllowIncomingResponse_UpdatePeerError)(nil),
	}
	file_peer_proto_msgTypes[13].OneofWrappers = []any{
		(*DenyIncomingResponse_Empty)(nil),
		(*DenyIncomingResponse_DenyIncomingErrorCode)(nil),
		(*DenyIncomingResponse_UpdatePeerError)(nil),
	}
	file_peer_proto_msgTypes[14].OneofWrappers = []any{
		(*AllowLocalNetworkResponse_Empty)(nil),
		(*AllowLocalNetworkResponse_AllowLocalNetworkErrorCode)(nil),
		(*AllowLocalNetworkResponse_UpdatePeerError)(nil),
	}
	file_peer_proto_msgTypes[15].OneofWrappers = []any{
		(*DenyLocalNetworkResponse_Empty)(nil),
		(*DenyLocalNetworkResponse_DenyLocalNetworkErrorCode)(nil),
		(*DenyLocalNetworkResponse_UpdatePeerError)(nil),
	}
	file_peer_proto_msgTypes[16].OneofWrappers = []any{
		(*AllowFileshareResponse_Empty)(nil),
		(*AllowFileshareResponse_AllowSendErrorCode)(nil),
		(*AllowFileshareResponse_UpdatePeerError)(nil),
	}
	file_peer_proto_msgTypes[17].OneofWrappers = []any{
		(*DenyFileshareResponse_Empty)(nil),
		(*DenyFileshareResponse_DenySendErrorCode)(nil),
		(*DenyFileshareResponse_UpdatePeerError)(nil),
	}
	file_peer_proto_msgTypes[18].OneofWrappers = []any{
		(*EnableAutomaticFileshareResponse_Empty)(nil),
		(*EnableAutomaticFileshareResponse_EnableAutomaticFileshareErrorCode)(nil),
		(*EnableAutomaticFileshareResponse_UpdatePeerError)(nil),
	}
	file_peer_proto_msgTypes[19].OneofWrappers = []any{
		(*DisableAutomaticFileshareResponse_Empty)(nil),
		(*DisableAutomaticFileshareResponse_DisableAutomaticFileshareErrorCode)(nil),
		(*DisableAutomaticFileshareResponse_UpdatePeerError)(nil),
	}
	file_peer_proto_msgTypes[20].OneofWrappers = []any{
		(*ConnectResponse_Empty)(nil),
		(*ConnectResponse_ConnectErrorCode)(nil),
		(*ConnectResponse_UpdatePeerError)(nil),
	}
	file_peer_proto_msgTypes[21].OneofWrappers = []any{
		(*PrivateKeyResponse_PrivateKey)(nil),
		(*PrivateKeyResponse_ServiceErrorCode)(nil),
		(*PrivateKeyResponse_MeshnetErrorCode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_peer_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_peer_proto_goTypes,
		DependencyIndexes: file_peer_proto_depIdxs,
		EnumInfos:         file_peer_proto_enumTypes,
		MessageInfos:      file_peer_proto_msgTypes,
	}.Build()
	File_peer_proto = out.File
	file_peer_proto_rawDesc = nil
	file_peer_proto_goTypes = nil
	file_peer_proto_depIdxs = nil
}
