import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:nordvpn/data/providers/token_info_provider.dart';
import 'package:nordvpn/logger.dart';
import 'package:nordvpn/service_locator.dart';
import 'package:url_launcher/url_launcher.dart';

// Convenience extension to open a URL in browser
extension Launch on Uri {
  Future<bool> launch() async {
    if (await canLaunchUrl(this)) {
      return await launchUrl(this);
    } else {
      logger.e('Could not launch $this');
    }

    return false;
  }
}

// Helper base class to wrap a URI into a launchable.
// This was introduce to easier pass a URI or a UriWithToken as parameter to
// the same function/class.
class LaunchableUri {
  final Uri uri;
  LaunchableUri(this.uri);
  LaunchableUri.parse(String url) : uri = Uri.parse(url);

  Future<bool> launch() async {
    return await uri.launch();
  }
}

// Wrapper for an URI that needs the tokens generated by the daemon.
// Before launching the URI fetches the tokens from the provider and appends
// them to the query parameters then opens the URI
final class UriWithToken extends LaunchableUri {
  UriWithToken.parse(super.url) : super.parse();

  @override
  Future<bool> launch() async {
    final ProviderContainer provider = sl();
    final finalUri = await provider
        .read(tokenInfoProvider.notifier)
        .addTokenInfo(uri);
    return await finalUri.launch();
  }
}
