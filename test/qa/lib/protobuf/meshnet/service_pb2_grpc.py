# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import empty_pb2 as empty__pb2
import fsnotify_pb2 as fsnotify__pb2
import invite_pb2 as invite__pb2
import peer_pb2 as peer__pb2
import service_response_pb2 as service__response__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MeshnetStub(object):
    """Meshnet defines a service which handles the meshnet
    functionality on a single device
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EnableMeshnet = channel.unary_unary(
                '/meshpb.Meshnet/EnableMeshnet',
                request_serializer=empty__pb2.Empty.SerializeToString,
                response_deserializer=service__response__pb2.MeshnetResponse.FromString,
                _registered_method=True)
        self.IsEnabled = channel.unary_unary(
                '/meshpb.Meshnet/IsEnabled',
                request_serializer=empty__pb2.Empty.SerializeToString,
                response_deserializer=service__response__pb2.IsEnabledResponse.FromString,
                _registered_method=True)
        self.DisableMeshnet = channel.unary_unary(
                '/meshpb.Meshnet/DisableMeshnet',
                request_serializer=empty__pb2.Empty.SerializeToString,
                response_deserializer=service__response__pb2.MeshnetResponse.FromString,
                _registered_method=True)
        self.RefreshMeshnet = channel.unary_unary(
                '/meshpb.Meshnet/RefreshMeshnet',
                request_serializer=empty__pb2.Empty.SerializeToString,
                response_deserializer=service__response__pb2.MeshnetResponse.FromString,
                _registered_method=True)
        self.GetInvites = channel.unary_unary(
                '/meshpb.Meshnet/GetInvites',
                request_serializer=empty__pb2.Empty.SerializeToString,
                response_deserializer=invite__pb2.GetInvitesResponse.FromString,
                _registered_method=True)
        self.Invite = channel.unary_unary(
                '/meshpb.Meshnet/Invite',
                request_serializer=invite__pb2.InviteRequest.SerializeToString,
                response_deserializer=invite__pb2.InviteResponse.FromString,
                _registered_method=True)
        self.RevokeInvite = channel.unary_unary(
                '/meshpb.Meshnet/RevokeInvite',
                request_serializer=invite__pb2.DenyInviteRequest.SerializeToString,
                response_deserializer=invite__pb2.RespondToInviteResponse.FromString,
                _registered_method=True)
        self.AcceptInvite = channel.unary_unary(
                '/meshpb.Meshnet/AcceptInvite',
                request_serializer=invite__pb2.InviteRequest.SerializeToString,
                response_deserializer=invite__pb2.RespondToInviteResponse.FromString,
                _registered_method=True)
        self.DenyInvite = channel.unary_unary(
                '/meshpb.Meshnet/DenyInvite',
                request_serializer=invite__pb2.DenyInviteRequest.SerializeToString,
                response_deserializer=invite__pb2.RespondToInviteResponse.FromString,
                _registered_method=True)
        self.GetPeers = channel.unary_unary(
                '/meshpb.Meshnet/GetPeers',
                request_serializer=empty__pb2.Empty.SerializeToString,
                response_deserializer=peer__pb2.GetPeersResponse.FromString,
                _registered_method=True)
        self.RemovePeer = channel.unary_unary(
                '/meshpb.Meshnet/RemovePeer',
                request_serializer=peer__pb2.UpdatePeerRequest.SerializeToString,
                response_deserializer=peer__pb2.RemovePeerResponse.FromString,
                _registered_method=True)
        self.ChangePeerNickname = channel.unary_unary(
                '/meshpb.Meshnet/ChangePeerNickname',
                request_serializer=peer__pb2.ChangePeerNicknameRequest.SerializeToString,
                response_deserializer=peer__pb2.ChangeNicknameResponse.FromString,
                _registered_method=True)
        self.ChangeMachineNickname = channel.unary_unary(
                '/meshpb.Meshnet/ChangeMachineNickname',
                request_serializer=peer__pb2.ChangeMachineNicknameRequest.SerializeToString,
                response_deserializer=peer__pb2.ChangeNicknameResponse.FromString,
                _registered_method=True)
        self.AllowRouting = channel.unary_unary(
                '/meshpb.Meshnet/AllowRouting',
                request_serializer=peer__pb2.UpdatePeerRequest.SerializeToString,
                response_deserializer=peer__pb2.AllowRoutingResponse.FromString,
                _registered_method=True)
        self.DenyRouting = channel.unary_unary(
                '/meshpb.Meshnet/DenyRouting',
                request_serializer=peer__pb2.UpdatePeerRequest.SerializeToString,
                response_deserializer=peer__pb2.DenyRoutingResponse.FromString,
                _registered_method=True)
        self.AllowIncoming = channel.unary_unary(
                '/meshpb.Meshnet/AllowIncoming',
                request_serializer=peer__pb2.UpdatePeerRequest.SerializeToString,
                response_deserializer=peer__pb2.AllowIncomingResponse.FromString,
                _registered_method=True)
        self.DenyIncoming = channel.unary_unary(
                '/meshpb.Meshnet/DenyIncoming',
                request_serializer=peer__pb2.UpdatePeerRequest.SerializeToString,
                response_deserializer=peer__pb2.DenyIncomingResponse.FromString,
                _registered_method=True)
        self.AllowLocalNetwork = channel.unary_unary(
                '/meshpb.Meshnet/AllowLocalNetwork',
                request_serializer=peer__pb2.UpdatePeerRequest.SerializeToString,
                response_deserializer=peer__pb2.AllowLocalNetworkResponse.FromString,
                _registered_method=True)
        self.DenyLocalNetwork = channel.unary_unary(
                '/meshpb.Meshnet/DenyLocalNetwork',
                request_serializer=peer__pb2.UpdatePeerRequest.SerializeToString,
                response_deserializer=peer__pb2.DenyLocalNetworkResponse.FromString,
                _registered_method=True)
        self.AllowFileshare = channel.unary_unary(
                '/meshpb.Meshnet/AllowFileshare',
                request_serializer=peer__pb2.UpdatePeerRequest.SerializeToString,
                response_deserializer=peer__pb2.AllowFileshareResponse.FromString,
                _registered_method=True)
        self.DenyFileshare = channel.unary_unary(
                '/meshpb.Meshnet/DenyFileshare',
                request_serializer=peer__pb2.UpdatePeerRequest.SerializeToString,
                response_deserializer=peer__pb2.DenyFileshareResponse.FromString,
                _registered_method=True)
        self.EnableAutomaticFileshare = channel.unary_unary(
                '/meshpb.Meshnet/EnableAutomaticFileshare',
                request_serializer=peer__pb2.UpdatePeerRequest.SerializeToString,
                response_deserializer=peer__pb2.EnableAutomaticFileshareResponse.FromString,
                _registered_method=True)
        self.DisableAutomaticFileshare = channel.unary_unary(
                '/meshpb.Meshnet/DisableAutomaticFileshare',
                request_serializer=peer__pb2.UpdatePeerRequest.SerializeToString,
                response_deserializer=peer__pb2.DisableAutomaticFileshareResponse.FromString,
                _registered_method=True)
        self.Connect = channel.unary_unary(
                '/meshpb.Meshnet/Connect',
                request_serializer=peer__pb2.UpdatePeerRequest.SerializeToString,
                response_deserializer=peer__pb2.ConnectResponse.FromString,
                _registered_method=True)
        self.ConnectCancel = channel.unary_unary(
                '/meshpb.Meshnet/ConnectCancel',
                request_serializer=peer__pb2.UpdatePeerRequest.SerializeToString,
                response_deserializer=peer__pb2.ConnectResponse.FromString,
                _registered_method=True)
        self.NotifyNewTransfer = channel.unary_unary(
                '/meshpb.Meshnet/NotifyNewTransfer',
                request_serializer=fsnotify__pb2.NewTransferNotification.SerializeToString,
                response_deserializer=fsnotify__pb2.NotifyNewTransferResponse.FromString,
                _registered_method=True)
        self.GetPrivateKey = channel.unary_unary(
                '/meshpb.Meshnet/GetPrivateKey',
                request_serializer=empty__pb2.Empty.SerializeToString,
                response_deserializer=peer__pb2.PrivateKeyResponse.FromString,
                _registered_method=True)


class MeshnetServicer(object):
    """Meshnet defines a service which handles the meshnet
    functionality on a single device
    """

    def EnableMeshnet(self, request, context):
        """EnableMeshnet enables the meshnet on this device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsEnabled(self, request, context):
        """IsEnabled retrieves whether meshnet is enabled
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableMeshnet(self, request, context):
        """DisableMeshnet disables the meshnet on this device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshMeshnet(self, request, context):
        """Remove later
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInvites(self, request, context):
        """GetInvites retrieves a list of all the invites related to
        this device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Invite(self, request, context):
        """Invite sends the invite to the specified email to join the
        meshnet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevokeInvite(self, request, context):
        """Invite sends the invite to the specified email to join the
        meshnet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcceptInvite(self, request, context):
        """AcceptInvite accepts the invite to join someone's meshnet
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DenyInvite(self, request, context):
        """AcceptInvite denies the invite to join someone's meshnet
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPeers(self, request, context):
        """GetPeers retries the list of all meshnet peers related to
        this device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemovePeer(self, request, context):
        """RemovePeer removes a peer from the meshnet
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangePeerNickname(self, request, context):
        """ChangePeerNickname changes(set/remove) the nickname for a meshnet peer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeMachineNickname(self, request, context):
        """ChangeMachineNickname changes the current machine meshnet nickname
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllowRouting(self, request, context):
        """AllowRouting allows a peer to route traffic through this
        device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DenyRouting(self, request, context):
        """DenyRouting allows a peer to route traffic through this
        device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllowIncoming(self, request, context):
        """AllowIncoming allows a peer to send traffic to this device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DenyIncoming(self, request, context):
        """DenyIncoming denies a peer to send traffic to this device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllowLocalNetwork(self, request, context):
        """AllowLocalNetwork allows a peer to access local network when
        routing through this device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DenyLocalNetwork(self, request, context):
        """DenyLocalNetwork denies a peer to access local network when
        routing through this device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllowFileshare(self, request, context):
        """AllowFileshare allows peer to send files to this device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DenyFileshare(self, request, context):
        """DenyFileshare denies a peer to send files to this device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableAutomaticFileshare(self, request, context):
        """EnableAutomaticFileshare from peer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableAutomaticFileshare(self, request, context):
        """DisableAutomaticFileshare from peer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectCancel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyNewTransfer(self, request, context):
        """NotifyNewTransfer notifies meshnet service about a newly created transaction so it can
        notify a corresponding meshnet peer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrivateKey(self, request, context):
        """GetPrivateKey is used to send self private key over to fileshare daemon
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MeshnetServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EnableMeshnet': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableMeshnet,
                    request_deserializer=empty__pb2.Empty.FromString,
                    response_serializer=service__response__pb2.MeshnetResponse.SerializeToString,
            ),
            'IsEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.IsEnabled,
                    request_deserializer=empty__pb2.Empty.FromString,
                    response_serializer=service__response__pb2.IsEnabledResponse.SerializeToString,
            ),
            'DisableMeshnet': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableMeshnet,
                    request_deserializer=empty__pb2.Empty.FromString,
                    response_serializer=service__response__pb2.MeshnetResponse.SerializeToString,
            ),
            'RefreshMeshnet': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshMeshnet,
                    request_deserializer=empty__pb2.Empty.FromString,
                    response_serializer=service__response__pb2.MeshnetResponse.SerializeToString,
            ),
            'GetInvites': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInvites,
                    request_deserializer=empty__pb2.Empty.FromString,
                    response_serializer=invite__pb2.GetInvitesResponse.SerializeToString,
            ),
            'Invite': grpc.unary_unary_rpc_method_handler(
                    servicer.Invite,
                    request_deserializer=invite__pb2.InviteRequest.FromString,
                    response_serializer=invite__pb2.InviteResponse.SerializeToString,
            ),
            'RevokeInvite': grpc.unary_unary_rpc_method_handler(
                    servicer.RevokeInvite,
                    request_deserializer=invite__pb2.DenyInviteRequest.FromString,
                    response_serializer=invite__pb2.RespondToInviteResponse.SerializeToString,
            ),
            'AcceptInvite': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptInvite,
                    request_deserializer=invite__pb2.InviteRequest.FromString,
                    response_serializer=invite__pb2.RespondToInviteResponse.SerializeToString,
            ),
            'DenyInvite': grpc.unary_unary_rpc_method_handler(
                    servicer.DenyInvite,
                    request_deserializer=invite__pb2.DenyInviteRequest.FromString,
                    response_serializer=invite__pb2.RespondToInviteResponse.SerializeToString,
            ),
            'GetPeers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPeers,
                    request_deserializer=empty__pb2.Empty.FromString,
                    response_serializer=peer__pb2.GetPeersResponse.SerializeToString,
            ),
            'RemovePeer': grpc.unary_unary_rpc_method_handler(
                    servicer.RemovePeer,
                    request_deserializer=peer__pb2.UpdatePeerRequest.FromString,
                    response_serializer=peer__pb2.RemovePeerResponse.SerializeToString,
            ),
            'ChangePeerNickname': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangePeerNickname,
                    request_deserializer=peer__pb2.ChangePeerNicknameRequest.FromString,
                    response_serializer=peer__pb2.ChangeNicknameResponse.SerializeToString,
            ),
            'ChangeMachineNickname': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeMachineNickname,
                    request_deserializer=peer__pb2.ChangeMachineNicknameRequest.FromString,
                    response_serializer=peer__pb2.ChangeNicknameResponse.SerializeToString,
            ),
            'AllowRouting': grpc.unary_unary_rpc_method_handler(
                    servicer.AllowRouting,
                    request_deserializer=peer__pb2.UpdatePeerRequest.FromString,
                    response_serializer=peer__pb2.AllowRoutingResponse.SerializeToString,
            ),
            'DenyRouting': grpc.unary_unary_rpc_method_handler(
                    servicer.DenyRouting,
                    request_deserializer=peer__pb2.UpdatePeerRequest.FromString,
                    response_serializer=peer__pb2.DenyRoutingResponse.SerializeToString,
            ),
            'AllowIncoming': grpc.unary_unary_rpc_method_handler(
                    servicer.AllowIncoming,
                    request_deserializer=peer__pb2.UpdatePeerRequest.FromString,
                    response_serializer=peer__pb2.AllowIncomingResponse.SerializeToString,
            ),
            'DenyIncoming': grpc.unary_unary_rpc_method_handler(
                    servicer.DenyIncoming,
                    request_deserializer=peer__pb2.UpdatePeerRequest.FromString,
                    response_serializer=peer__pb2.DenyIncomingResponse.SerializeToString,
            ),
            'AllowLocalNetwork': grpc.unary_unary_rpc_method_handler(
                    servicer.AllowLocalNetwork,
                    request_deserializer=peer__pb2.UpdatePeerRequest.FromString,
                    response_serializer=peer__pb2.AllowLocalNetworkResponse.SerializeToString,
            ),
            'DenyLocalNetwork': grpc.unary_unary_rpc_method_handler(
                    servicer.DenyLocalNetwork,
                    request_deserializer=peer__pb2.UpdatePeerRequest.FromString,
                    response_serializer=peer__pb2.DenyLocalNetworkResponse.SerializeToString,
            ),
            'AllowFileshare': grpc.unary_unary_rpc_method_handler(
                    servicer.AllowFileshare,
                    request_deserializer=peer__pb2.UpdatePeerRequest.FromString,
                    response_serializer=peer__pb2.AllowFileshareResponse.SerializeToString,
            ),
            'DenyFileshare': grpc.unary_unary_rpc_method_handler(
                    servicer.DenyFileshare,
                    request_deserializer=peer__pb2.UpdatePeerRequest.FromString,
                    response_serializer=peer__pb2.DenyFileshareResponse.SerializeToString,
            ),
            'EnableAutomaticFileshare': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableAutomaticFileshare,
                    request_deserializer=peer__pb2.UpdatePeerRequest.FromString,
                    response_serializer=peer__pb2.EnableAutomaticFileshareResponse.SerializeToString,
            ),
            'DisableAutomaticFileshare': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableAutomaticFileshare,
                    request_deserializer=peer__pb2.UpdatePeerRequest.FromString,
                    response_serializer=peer__pb2.DisableAutomaticFileshareResponse.SerializeToString,
            ),
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=peer__pb2.UpdatePeerRequest.FromString,
                    response_serializer=peer__pb2.ConnectResponse.SerializeToString,
            ),
            'ConnectCancel': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectCancel,
                    request_deserializer=peer__pb2.UpdatePeerRequest.FromString,
                    response_serializer=peer__pb2.ConnectResponse.SerializeToString,
            ),
            'NotifyNewTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyNewTransfer,
                    request_deserializer=fsnotify__pb2.NewTransferNotification.FromString,
                    response_serializer=fsnotify__pb2.NotifyNewTransferResponse.SerializeToString,
            ),
            'GetPrivateKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrivateKey,
                    request_deserializer=empty__pb2.Empty.FromString,
                    response_serializer=peer__pb2.PrivateKeyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'meshpb.Meshnet', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('meshpb.Meshnet', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Meshnet(object):
    """Meshnet defines a service which handles the meshnet
    functionality on a single device
    """

    @staticmethod
    def EnableMeshnet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/EnableMeshnet',
            empty__pb2.Empty.SerializeToString,
            service__response__pb2.MeshnetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/IsEnabled',
            empty__pb2.Empty.SerializeToString,
            service__response__pb2.IsEnabledResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DisableMeshnet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/DisableMeshnet',
            empty__pb2.Empty.SerializeToString,
            service__response__pb2.MeshnetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RefreshMeshnet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/RefreshMeshnet',
            empty__pb2.Empty.SerializeToString,
            service__response__pb2.MeshnetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInvites(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/GetInvites',
            empty__pb2.Empty.SerializeToString,
            invite__pb2.GetInvitesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Invite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/Invite',
            invite__pb2.InviteRequest.SerializeToString,
            invite__pb2.InviteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RevokeInvite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/RevokeInvite',
            invite__pb2.DenyInviteRequest.SerializeToString,
            invite__pb2.RespondToInviteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AcceptInvite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/AcceptInvite',
            invite__pb2.InviteRequest.SerializeToString,
            invite__pb2.RespondToInviteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DenyInvite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/DenyInvite',
            invite__pb2.DenyInviteRequest.SerializeToString,
            invite__pb2.RespondToInviteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPeers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/GetPeers',
            empty__pb2.Empty.SerializeToString,
            peer__pb2.GetPeersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemovePeer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/RemovePeer',
            peer__pb2.UpdatePeerRequest.SerializeToString,
            peer__pb2.RemovePeerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChangePeerNickname(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/ChangePeerNickname',
            peer__pb2.ChangePeerNicknameRequest.SerializeToString,
            peer__pb2.ChangeNicknameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChangeMachineNickname(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/ChangeMachineNickname',
            peer__pb2.ChangeMachineNicknameRequest.SerializeToString,
            peer__pb2.ChangeNicknameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AllowRouting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/AllowRouting',
            peer__pb2.UpdatePeerRequest.SerializeToString,
            peer__pb2.AllowRoutingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DenyRouting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/DenyRouting',
            peer__pb2.UpdatePeerRequest.SerializeToString,
            peer__pb2.DenyRoutingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AllowIncoming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/AllowIncoming',
            peer__pb2.UpdatePeerRequest.SerializeToString,
            peer__pb2.AllowIncomingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DenyIncoming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/DenyIncoming',
            peer__pb2.UpdatePeerRequest.SerializeToString,
            peer__pb2.DenyIncomingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AllowLocalNetwork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/AllowLocalNetwork',
            peer__pb2.UpdatePeerRequest.SerializeToString,
            peer__pb2.AllowLocalNetworkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DenyLocalNetwork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/DenyLocalNetwork',
            peer__pb2.UpdatePeerRequest.SerializeToString,
            peer__pb2.DenyLocalNetworkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AllowFileshare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/AllowFileshare',
            peer__pb2.UpdatePeerRequest.SerializeToString,
            peer__pb2.AllowFileshareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DenyFileshare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/DenyFileshare',
            peer__pb2.UpdatePeerRequest.SerializeToString,
            peer__pb2.DenyFileshareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EnableAutomaticFileshare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/EnableAutomaticFileshare',
            peer__pb2.UpdatePeerRequest.SerializeToString,
            peer__pb2.EnableAutomaticFileshareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DisableAutomaticFileshare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/DisableAutomaticFileshare',
            peer__pb2.UpdatePeerRequest.SerializeToString,
            peer__pb2.DisableAutomaticFileshareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/Connect',
            peer__pb2.UpdatePeerRequest.SerializeToString,
            peer__pb2.ConnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConnectCancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/ConnectCancel',
            peer__pb2.UpdatePeerRequest.SerializeToString,
            peer__pb2.ConnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NotifyNewTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/NotifyNewTransfer',
            fsnotify__pb2.NewTransferNotification.SerializeToString,
            fsnotify__pb2.NotifyNewTransferResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPrivateKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meshpb.Meshnet/GetPrivateKey',
            empty__pb2.Empty.SerializeToString,
            peer__pb2.PrivateKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
